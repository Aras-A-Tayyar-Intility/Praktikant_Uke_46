{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { dateFormat, timeFormat } from '../../../utils/formatDate';\nimport useLocale from '../../../hooks/useLocale';\n/** Format date and/or time based on current Bifrost locale */\n\nvar FormatDate = function FormatDate(_ref) {\n  var date = _ref.date,\n      show = _ref.show;\n\n  var _useLocale = useLocale(),\n      dateOptions = _useLocale.dateOptions;\n\n  if (show === 'time') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, timeFormat(dateOptions.locale, date, dateOptions.time));\n  } else if (show === 'datetime') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, dateFormat(dateOptions.locale, date, dateOptions.date) + ' ' + timeFormat(dateOptions.locale, date, dateOptions.time));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, dateFormat(dateOptions.locale, date, dateOptions.date));\n  }\n};\n\nFormatDate.defaultProps = {\n  show: 'date'\n};\nFormatDate.propTypes = {\n  /** Date object */\n  date: PropTypes.instanceOf(Date),\n\n  /** Display either 'date' (default), 'datetime', or 'time' */\n  show: PropTypes.oneOf(['date', 'datetime', 'time'])\n};\nexport default FormatDate;","map":{"version":3,"sources":["C:/Users/aa883/OneDrive - Intility AS/koding/oppgave_uke_46/Praktikant_Uke_46_bifrost/node_modules/@intility/bifrost-react/es/components/Utility/FormatDate/FormatDate.js"],"names":["React","PropTypes","dateFormat","timeFormat","useLocale","FormatDate","_ref","date","show","_useLocale","dateOptions","createElement","Fragment","locale","time","defaultProps","propTypes","instanceOf","Date","oneOf"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,2BAAvC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA;;AACA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACzC,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;;AAGA,MAAIC,UAAU,GAAGL,SAAS,EAA1B;AAAA,MACIM,WAAW,GAAGD,UAAU,CAACC,WAD7B;;AAGA,MAAIF,IAAI,KAAK,MAAb,EAAqB;AACnB,WAAO,aAAaR,KAAK,CAACW,aAAN,CAAoBX,KAAK,CAACY,QAA1B,EAAoC,IAApC,EAA0CT,UAAU,CAACO,WAAW,CAACG,MAAb,EAAqBN,IAArB,EAA2BG,WAAW,CAACI,IAAvC,CAApD,CAApB;AACD,GAFD,MAEO,IAAIN,IAAI,KAAK,UAAb,EAAyB;AAC9B,WAAO,aAAaR,KAAK,CAACW,aAAN,CAAoBX,KAAK,CAACY,QAA1B,EAAoC,IAApC,EAA0CV,UAAU,CAACQ,WAAW,CAACG,MAAb,EAAqBN,IAArB,EAA2BG,WAAW,CAACH,IAAvC,CAAV,GAAyD,GAAzD,GAA+DJ,UAAU,CAACO,WAAW,CAACG,MAAb,EAAqBN,IAArB,EAA2BG,WAAW,CAACI,IAAvC,CAAnH,CAApB;AACD,GAFM,MAEA;AACL,WAAO,aAAad,KAAK,CAACW,aAAN,CAAoBX,KAAK,CAACY,QAA1B,EAAoC,IAApC,EAA0CV,UAAU,CAACQ,WAAW,CAACG,MAAb,EAAqBN,IAArB,EAA2BG,WAAW,CAACH,IAAvC,CAApD,CAApB;AACD;AACF,CAdD;;AAgBAF,UAAU,CAACU,YAAX,GAA0B;AACxBP,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAGAH,UAAU,CAACW,SAAX,GAAuB;AACrB;AACAT,EAAAA,IAAI,EAAEN,SAAS,CAACgB,UAAV,CAAqBC,IAArB,CAFe;;AAIrB;AACAV,EAAAA,IAAI,EAAEP,SAAS,CAACkB,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,EAAqB,MAArB,CAAhB;AALe,CAAvB;AAOA,eAAed,UAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { dateFormat, timeFormat } from '../../../utils/formatDate';\nimport useLocale from '../../../hooks/useLocale';\n\n/** Format date and/or time based on current Bifrost locale */\nvar FormatDate = function FormatDate(_ref) {\n  var date = _ref.date,\n      show = _ref.show;\n\n  var _useLocale = useLocale(),\n      dateOptions = _useLocale.dateOptions;\n\n  if (show === 'time') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, timeFormat(dateOptions.locale, date, dateOptions.time));\n  } else if (show === 'datetime') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, dateFormat(dateOptions.locale, date, dateOptions.date) + ' ' + timeFormat(dateOptions.locale, date, dateOptions.time));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, dateFormat(dateOptions.locale, date, dateOptions.date));\n  }\n};\n\nFormatDate.defaultProps = {\n  show: 'date'\n};\nFormatDate.propTypes = {\n  /** Date object */\n  date: PropTypes.instanceOf(Date),\n\n  /** Display either 'date' (default), 'datetime', or 'time' */\n  show: PropTypes.oneOf(['date', 'datetime', 'time'])\n};\nexport default FormatDate;"]},"metadata":{},"sourceType":"module"}