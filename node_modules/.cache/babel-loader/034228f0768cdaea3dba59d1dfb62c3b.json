{"ast":null,"code":"// When onClick is provided to a component\n// component should have tabIndex and keyboard bindings\n// this function return value can be spread on a native element\n// makes the element simulate what a button element natively does\nvar accessibleOnClick = function accessibleOnClick(props, onClick) {\n  if (typeof onClick === 'function') {\n    return {\n      onClick: onClick,\n      role: 'button',\n      tabIndex: 0,\n      onKeyDown: function onKeyDown(e) {\n        var _props$onKeyDown;\n\n        if (e.key === 'Enter') {\n          e.preventDefault();\n\n          if (!e.repeat) {\n            onClick(e);\n          }\n        } else if (e.key === ' ') {\n          e.preventDefault();\n        }\n\n        (_props$onKeyDown = props.onKeyDown) === null || _props$onKeyDown === void 0 ? void 0 : _props$onKeyDown.call(props, e);\n      },\n      onKeyUp: function onKeyUp(e) {\n        var _props$onKeyUp;\n\n        if (e.key === ' ') {\n          e.preventDefault();\n          onClick(e);\n        }\n\n        (_props$onKeyUp = props.onKeyUp) === null || _props$onKeyUp === void 0 ? void 0 : _props$onKeyUp.call(props, e);\n      }\n    };\n  }\n};\n\nexport default accessibleOnClick;","map":{"version":3,"sources":["C:/Users/aa883/OneDrive - Intility AS/koding/oppgave_uke_46/Praktikant_Uke_46_bifrost/node_modules/@intility/bifrost-react/es/utils/accessibleOnClick.js"],"names":["accessibleOnClick","props","onClick","role","tabIndex","onKeyDown","e","_props$onKeyDown","key","preventDefault","repeat","call","onKeyUp","_props$onKeyUp"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA2C;AACjE,MAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAO;AACLA,MAAAA,OAAO,EAAEA,OADJ;AAELC,MAAAA,IAAI,EAAE,QAFD;AAGLC,MAAAA,QAAQ,EAAE,CAHL;AAILC,MAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,YAAIC,gBAAJ;;AAEA,YAAID,CAAC,CAACE,GAAF,KAAU,OAAd,EAAuB;AACrBF,UAAAA,CAAC,CAACG,cAAF;;AAEA,cAAI,CAACH,CAAC,CAACI,MAAP,EAAe;AACbR,YAAAA,OAAO,CAACI,CAAD,CAAP;AACD;AACF,SAND,MAMO,IAAIA,CAAC,CAACE,GAAF,KAAU,GAAd,EAAmB;AACxBF,UAAAA,CAAC,CAACG,cAAF;AACD;;AAED,SAACF,gBAAgB,GAAGN,KAAK,CAACI,SAA1B,MAAyC,IAAzC,IAAiDE,gBAAgB,KAAK,KAAK,CAA3E,GAA+E,KAAK,CAApF,GAAwFA,gBAAgB,CAACI,IAAjB,CAAsBV,KAAtB,EAA6BK,CAA7B,CAAxF;AACD,OAlBI;AAmBLM,MAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBN,CAAjB,EAAoB;AAC3B,YAAIO,cAAJ;;AAEA,YAAIP,CAAC,CAACE,GAAF,KAAU,GAAd,EAAmB;AACjBF,UAAAA,CAAC,CAACG,cAAF;AACAP,UAAAA,OAAO,CAACI,CAAD,CAAP;AACD;;AAED,SAACO,cAAc,GAAGZ,KAAK,CAACW,OAAxB,MAAqC,IAArC,IAA6CC,cAAc,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,cAAc,CAACF,IAAf,CAAoBV,KAApB,EAA2BK,CAA3B,CAAlF;AACD;AA5BI,KAAP;AA8BD;AACF,CAjCD;;AAmCA,eAAeN,iBAAf","sourcesContent":["// When onClick is provided to a component\n// component should have tabIndex and keyboard bindings\n// this function return value can be spread on a native element\n// makes the element simulate what a button element natively does\nvar accessibleOnClick = function accessibleOnClick(props, onClick) {\n  if (typeof onClick === 'function') {\n    return {\n      onClick: onClick,\n      role: 'button',\n      tabIndex: 0,\n      onKeyDown: function onKeyDown(e) {\n        var _props$onKeyDown;\n\n        if (e.key === 'Enter') {\n          e.preventDefault();\n\n          if (!e.repeat) {\n            onClick(e);\n          }\n        } else if (e.key === ' ') {\n          e.preventDefault();\n        }\n\n        (_props$onKeyDown = props.onKeyDown) === null || _props$onKeyDown === void 0 ? void 0 : _props$onKeyDown.call(props, e);\n      },\n      onKeyUp: function onKeyUp(e) {\n        var _props$onKeyUp;\n\n        if (e.key === ' ') {\n          e.preventDefault();\n          onClick(e);\n        }\n\n        (_props$onKeyUp = props.onKeyUp) === null || _props$onKeyUp === void 0 ? void 0 : _props$onKeyUp.call(props, e);\n      }\n    };\n  }\n};\n\nexport default accessibleOnClick;"]},"metadata":{},"sourceType":"module"}