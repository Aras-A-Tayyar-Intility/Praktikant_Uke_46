/// <reference types="react" />
export declare const StateArray: readonly ["inactive", "neutral", "theme", "success", "warning", "alert"];
export declare type State = typeof StateArray[number];
export declare type RestProps<T extends keyof JSX.IntrinsicElements> = React.PropsWithoutRef<JSX.IntrinsicElements[T]>;
export declare type ForwardRefType<T, P, S = {}> = React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>> & S;
export declare type ExportWithSub<T> = T extends ForwardRefType<infer A, infer B, infer S> ? ForwardRefType<A, B, Required<S>> : never;
