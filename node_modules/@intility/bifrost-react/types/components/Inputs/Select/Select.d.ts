import React from 'react';
import { Props as ReactSelectProps, OptionTypeBase } from 'react-select';
import { Props as AsyncSelectProps } from 'react-select/async';
import { Props as CreatableSelectProps } from 'react-select/creatable';
import { Props as AsyncCreatableSelectProps } from 'react-select/async-creatable';
import PropTypes from 'prop-types';
export declare const selectStyles: {
    control: (provided: any, state: any) => any;
    indicatorSeparator: () => {
        display: string;
    };
    indicatorsContainer: (provided: any) => any;
    clearIndicator: (provided: any) => any;
    dropdownIndicator: (provided: any, state: any) => any;
    input: (provided: any) => any;
    menuPortal: (provided: any) => any;
    menu: (provided: any) => any;
    menuList: (provided: any) => any;
    placeholder: (provided: any, state: any) => any;
    singleValue: (provided: any, state: any) => any;
    option: (provided: any, state: any) => any;
    multiValue: (provided: any, state: any) => any;
    multiValueLabel: (provided: any, state: any) => any;
    multiValueRemove: (provided: any, state: any) => any;
    group: (provided: any) => any;
    groupHeading: (provided: any) => any;
};
export declare const selectComponents: {
    DropdownIndicator: (props: any) => JSX.Element;
    Input: React.FC<React.ClassAttributes<HTMLInputElement> & React.InputHTMLAttributes<HTMLInputElement> & ReactSelectProps<{
        label: string;
        value: string;
    }, false, import("react-select").GroupTypeBase<{
        label: string;
        value: string;
    }>> & import("react-select").InputProps & {
        required?: boolean | undefined;
    }>;
    MenuList: {
        (props: any): JSX.Element;
        propTypes: {
            children: PropTypes.Requireable<object>;
        };
    };
    ClearIndicator: (props: any) => JSX.Element;
    Option: (props: any) => JSX.Element;
};
export declare type SelectProps = {
    label: string;
    hideLabel?: boolean;
    description?: string;
    state?: 'theme' | 'alert';
    feedback?: string | React.ReactNode;
    required?: boolean;
    requiredNoLabel?: boolean;
    optional?: boolean;
    containerProps?: JSX.IntrinsicElements['div'];
};
export declare type SelectType = {
    <OptionType extends OptionTypeBase = {
        label: string;
        value: string;
    }, IsMulti extends boolean = false>(props: ReactSelectProps<OptionType, IsMulti> & SelectProps): React.ReactElement | null;
    propTypes?: React.WeakValidationMap<ReactSelectProps>;
    defaultProps?: Partial<ReactSelectProps>;
    displayName?: string;
};
declare const SelectComponent: SelectType;
export declare type AsyncType = {
    <OptionType extends OptionTypeBase = {
        label: string;
        value: string;
    }, IsMulti extends boolean = false>(props: AsyncSelectProps<OptionType, IsMulti> & SelectProps): React.ReactElement | null;
    propTypes?: React.WeakValidationMap<AsyncSelectProps<{
        label: string;
        value: string;
    }, false>>;
    defaultProps?: Partial<AsyncSelectProps<{
        label: string;
        value: string;
    }, false>>;
    displayName?: string;
};
declare const AsyncSelect: AsyncType;
export declare type CreatableType = {
    <OptionType extends OptionTypeBase = {
        label: string;
        value: string;
    }, IsMulti extends boolean = false>(props: CreatableSelectProps<OptionType, IsMulti> & SelectProps): React.ReactElement | null;
    propTypes?: React.WeakValidationMap<CreatableSelectProps<{
        label: string;
        value: string;
    }, false>>;
    defaultProps?: Partial<CreatableSelectProps<{
        label: string;
        value: string;
    }, false>>;
    displayName?: string;
};
declare const CreatableSelect: CreatableType;
export declare type AsyncCreatableType = {
    <OptionType extends OptionTypeBase = {
        label: string;
        value: string;
    }, IsMulti extends boolean = false>(props: AsyncCreatableSelectProps<OptionType, IsMulti> & SelectProps): React.ReactElement | null;
    propTypes?: React.WeakValidationMap<AsyncCreatableSelectProps<{
        label: string;
        value: string;
    }, false>>;
    defaultProps?: Partial<AsyncCreatableSelectProps<{
        label: string;
        value: string;
    }, false>>;
    displayName?: string;
};
declare const AsyncCreatableSelect: AsyncCreatableType;
export { AsyncSelect, CreatableSelect, AsyncCreatableSelect };
export default SelectComponent;
