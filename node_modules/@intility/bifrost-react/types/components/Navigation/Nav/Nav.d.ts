import React from 'react';
import { NavTopProps } from './Nav.Top';
import { NavSideProps } from './Nav.Side';
import { NavMobileProps } from './Nav.Mobile';
import { NavItemProps } from './Nav.Item';
import { NavGroupProps } from './Nav.Group';
import { NavHeaderProps } from './Nav.Header';
import { ForwardRefType, RestProps } from '../../../types';
export declare type NavProps = RestProps<'main'> & {
    appName: React.ReactNode;
    top?: React.ReactNode;
    topProps?: Omit<NavTopProps, 'children' | 'appName'> & {
        appName?: React.ReactNode;
    };
    side?: React.ReactNode;
    sideProps?: Omit<NavSideProps, 'children'>;
    mobile?: React.ReactNode;
    mobileProps?: Omit<NavMobileProps, 'children'>;
    mobileClassName?: string;
    hideCollapse?: boolean;
    collapsedAppName?: string;
    hideTheme?: boolean;
    logoHref?: string;
    logoOnClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
};
declare const _default: ForwardRefType<HTMLElement, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "key" | keyof React.HTMLAttributes<HTMLElement>> & {
    appName: React.ReactNode;
    top?: React.ReactNode;
    topProps?: (Omit<NavTopProps, "children" | "appName"> & {
        appName?: React.ReactNode;
    }) | undefined;
    side?: React.ReactNode;
    sideProps?: Omit<NavSideProps, "children"> | undefined;
    mobile?: React.ReactNode;
    mobileProps?: Omit<NavMobileProps, "children"> | undefined;
    mobileClassName?: string | undefined;
    hideCollapse?: boolean | undefined;
    collapsedAppName?: string | undefined;
    hideTheme?: boolean | undefined;
    logoHref?: string | undefined;
    logoOnClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
} & React.RefAttributes<HTMLElement>, Required<React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "key" | keyof React.HTMLAttributes<HTMLElement>> & {
    appName: React.ReactNode;
    top?: React.ReactNode;
    topProps?: (Omit<NavTopProps, "children" | "appName"> & {
        appName?: React.ReactNode;
    }) | undefined;
    side?: React.ReactNode;
    sideProps?: Omit<NavSideProps, "children"> | undefined;
    mobile?: React.ReactNode;
    mobileProps?: Omit<NavMobileProps, "children"> | undefined;
    mobileClassName?: string | undefined;
    hideCollapse?: boolean | undefined;
    collapsedAppName?: string | undefined;
    hideTheme?: boolean | undefined;
    logoHref?: string | undefined;
    logoOnClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
} & React.RefAttributes<HTMLElement>> & {
    Item?: React.ForwardRefExoticComponent<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        icon?: import("@fortawesome/fontawesome-svg-core").IconProp | undefined;
        hideCircle?: boolean | undefined;
    } & React.RefAttributes<HTMLDivElement>> | undefined;
    Group?: React.ForwardRefExoticComponent<Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref" | "name"> & {
        name?: React.ReactChild | React.ReactFragment | React.ReactPortal | undefined;
        active?: boolean | undefined;
        icon?: import("@fortawesome/fontawesome-svg-core").IconProp | undefined;
        autoScroll?: boolean | undefined;
    } & React.RefAttributes<HTMLDivElement>> | undefined;
    Top?: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "key" | keyof React.HTMLAttributes<HTMLElement>> & {
        appName: React.ReactNode;
        preLogo?: React.ReactNode;
        hideTheme?: boolean | undefined;
        logoClassName?: string | undefined;
        logoHref?: string | undefined;
        logoOnClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    } & React.RefAttributes<HTMLElement>> | undefined;
    Side?: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "key" | keyof React.HTMLAttributes<HTMLElement>> & {
        appName?: React.ReactNode;
        hideCollapse?: boolean | undefined;
        collapsed?: boolean | undefined;
        onCollapsedChange?: ((collapsed: boolean) => void) | undefined;
        collapsedAppName?: string | undefined;
        logoHref?: string | undefined;
        logoOnClick?: ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void) | undefined;
    } & React.RefAttributes<HTMLElement>> | undefined;
    Mobile?: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "key" | keyof React.HTMLAttributes<HTMLElement>> & {
        onOverlayClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    } & React.RefAttributes<HTMLElement>> | undefined;
    Header?: React.ForwardRefExoticComponent<NavHeaderProps & React.RefAttributes<HTMLDivElement>> | undefined;
    Search?: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof React.InputHTMLAttributes<HTMLInputElement>> & {
        onSubmit?: ((event: React.FormEvent<HTMLFormElement>) => void) | undefined;
        loading?: boolean | undefined;
        itemProps?: NavItemProps | undefined;
        groupProps?: NavGroupProps | undefined;
        formProps?: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement> | undefined;
    } & React.RefAttributes<HTMLInputElement>> | undefined;
}>>;
export default _default;
