import React from 'react';
import PropTypes from 'prop-types';
import { RestProps } from '../../../types';
export declare type TabsProps = Omit<RestProps<'div'>, 'onChange'> & {
    active?: string;
    onChange?: (key: string) => void;
    variant?: 'default' | 'styled';
};
declare const Tabs: {
    ({ variant, ...rawProps }: TabsProps): JSX.Element;
    propTypes: {
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        active: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        variant: PropTypes.Requireable<string>;
    };
    defaultProps: {
        variant: string;
    };
    Item: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>> & {
        title: string;
        disabled?: boolean | undefined;
        active?: boolean | undefined;
        tabProps?: (React.ClassAttributes<HTMLAnchorElement> & React.AnchorHTMLAttributes<HTMLAnchorElement> & {
            icon?: import("@fortawesome/fontawesome-svg-core").IconProp | undefined;
        }) | undefined;
        noPadding?: boolean | undefined;
    } & React.RefAttributes<HTMLAnchorElement>>;
    displayName: string;
};
export default Tabs;
