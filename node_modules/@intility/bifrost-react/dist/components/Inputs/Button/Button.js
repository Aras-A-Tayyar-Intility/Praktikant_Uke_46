"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _types = require("../../../types");

var _Icon = _interopRequireDefault(require("../../Visual/Icon"));

var _Button = _interopRequireDefault(require("./Button.Group"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Clickable button
 */
var Button = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      variant = _ref.variant,
      state = _ref.state,
      disabled = _ref.disabled,
      stretch = _ref.stretch,
      className = _ref.className,
      rightIcon = _ref.rightIcon,
      icon = _ref.icon,
      title = _ref.title,
      small = _ref.small,
      active = _ref.active,
      props = _objectWithoutProperties(_ref, ["children", "variant", "state", "disabled", "stretch", "className", "rightIcon", "icon", "title", "small", "active"]);

  var autoTitle = !stretch && typeof children === 'string' && children.length > 20 ? children : undefined;
  return /*#__PURE__*/_react.default.createElement("button", _extends({
    "data-testid": "bf-button",
    className: (0, _classnames.default)(className, 'bf-button', {
      'bf-button-small': small && (variant === 'filled' || variant === 'basic' || variant === 'outline'),
      'bf-button-filled': variant === 'filled',
      'bf-button-outline': variant === 'outline',
      'bf-button-inactive': state === 'inactive',
      'bf-button-alert': state === 'alert',
      'bf-button-stretch': stretch || icon && !children,
      'bf-button-left-icon': icon && children && !rightIcon,
      'bf-button-right-icon': icon && children && rightIcon,
      'bf-button-selected': active
    }),
    disabled: disabled,
    title: title || autoTitle,
    ref: ref
  }, props), icon && !rightIcon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: icon
  }), children, icon && rightIcon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: icon
  }));
});
Button.Group = _Button.default;
Button.propTypes = {
  /** Button content (text or fragment) */
  children: _propTypes.default.node,

  /** Disable the button */
  disabled: _propTypes.default.bool,

  /** Ignore width constraints */
  stretch: _propTypes.default.bool,

  /** Available variants: 'basic' (default), 'filled', and 'outline' */
  variant: _propTypes.default.oneOf(['basic', 'filled', 'outline']),

  /** Available states (only for 'filled' variant): 'theme' (default), and 'inactive' */
  state: _propTypes.default.oneOf(_types.StateArray),

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** Position icon on right hand side */
  rightIcon: _propTypes.default.bool,

  /** Optional html title (tooltip) */
  title: _propTypes.default.string,

  /** Change the button size to small */
  small: _propTypes.default.bool,

  /** Bool prop indicating a selected Button. This only works when used as children of Button.Group */
  active: _propTypes.default.bool
};
Button.defaultProps = {
  disabled: false,
  stretch: false,
  variant: 'basic',
  state: 'theme',
  className: '',
  rightIcon: false,
  title: '',
  small: false
};
Button.displayName = 'Button';
var _default = Button;
exports.default = _default;