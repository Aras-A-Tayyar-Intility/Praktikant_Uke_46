"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeRegularSvgIcons = require("@fortawesome/free-regular-svg-icons");

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _Icon = _interopRequireDefault(require("../../Visual/Icon"));

var _useUniqueId = _interopRequireDefault(require("../../../hooks/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A card rendered as a Checkbox or Radio button
 */
var CheckboxCard = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'checkbox' : _ref$type,
      label = _ref.label,
      children = _ref.children,
      checked = _ref.checked,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? '' : _ref$id,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      className = _ref.className,
      header = _ref.header,
      props = _objectWithoutProperties(_ref, ["type", "label", "children", "checked", "id", "disabled", "className", "header"]);

  var checkboxId = (0, _useUniqueId.default)(id);
  var isRadio = type === 'radio';
  var icon = checked ? _freeSolidSvgIcons.faCheckSquare : _freeRegularSvgIcons.faSquare;
  if (isRadio) icon = checked ? _freeSolidSvgIcons.faDotCircle : _freeRegularSvgIcons.faCircle;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('bf-checkboxcard-wrapper', className)
  }, /*#__PURE__*/_react.default.createElement("input", _extends({
    id: checkboxId,
    className: "bf-checkboxcard-input",
    type: isRadio ? 'radio' : 'checkbox',
    checked: checked,
    ref: ref,
    disabled: disabled,
    "data-testid": "bf-checkboxcard-input"
  }, props)), /*#__PURE__*/_react.default.createElement("label", {
    className: "bf-checkboxcard-label",
    htmlFor: checkboxId,
    "data-testid": "bf-checkboxcard-label"
  }, header && /*#__PURE__*/_react.default.createElement("header", {
    className: "bf-checkboxcard-header"
  }, header), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-checkboxcard-content"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-checkboxcard-label-text"
  }, label, /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-checkboxcard-icon",
    "data-testid": "bf-checkboxcard-icon"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    fixedWidth: true,
    icon: icon
  }))), children)));
});
CheckboxCard.propTypes = {
  /** Label text or content shown as title */
  label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]).isRequired,

  /** CheckboxCard type: `checkbox` (default) or `radio` */
  type: _propTypes.default.oneOf(['checkbox', 'radio']),

  /** CheckboxCard content */
  children: _propTypes.default.node,

  /** Checked state */
  checked: _propTypes.default.bool,

  /** Unique id for input and label */
  id: _propTypes.default.string,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Disable the component */
  disabled: _propTypes.default.bool,

  /** Optional header content */
  header: _propTypes.default.element
};
CheckboxCard.displayName = 'CheckboxCard';
var _default = CheckboxCard;
exports.default = _default;