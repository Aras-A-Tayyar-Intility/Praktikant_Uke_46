"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AsyncCreatableSelect = exports.CreatableSelect = exports.AsyncSelect = exports.selectComponents = exports.selectStyles = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactSelect = _interopRequireDefault(require("react-select"));

var _async = _interopRequireDefault(require("react-select/async"));

var _creatable = _interopRequireDefault(require("react-select/creatable"));

var _asyncCreatable = _interopRequireDefault(require("react-select/async-creatable"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _overrides = require("./overrides");

var _common = require("../common");

var _useUniqueId = _interopRequireDefault(require("../../../hooks/useUniqueId"));

var _Label = _interopRequireDefault(require("../Label"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var selectStyles = {
  control: function control(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      '&:hover': {
        borderBottomColor: state.isFocused ? 'var(--bfc-base-c-theme)' : 'var(--bfc-base-c-inverted-2)',
        // Change color of dropdown icon when hover on Select
        '.bf-select__dropdown-indicator': {
          color: 'var(--bfc-theme-3)'
        }
      },
      backgroundColor: state.isDisabled ? 'var(--bfc-base-dimmed)' : 'var(--bfc-base-3)',
      border: 0,
      borderBottomWidth: '2px',
      borderBottomStyle: 'solid',
      borderBottomColor: state.isFocused ? 'var(--bfc-base-c-theme)' : state.isDisabled ? 'transparent' : 'var(--bfc-base-c-wcag)',
      boxShadow: state.isFocused && '0 0 0 1px var(--bfc-theme-3)',
      borderRadius: state.selectProps.menuIsOpen ? ' var(--bfl-border-radius) var(--bfl-border-radius) 0 0' : 'var(--bfl-border-radius)',
      minHeight: 'var(--bfs40)',
      cursor: 'text'
    });
  },
  indicatorSeparator: function indicatorSeparator() {
    return {
      display: 'none'
    };
  },
  indicatorsContainer: function indicatorsContainer(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      alignItems: 'flex-start',
      padding: '7.5px 0'
    });
  },
  clearIndicator: function clearIndicator(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      '&:hover': {
        color: 'var(--bfc-base-c-1)'
      },
      color: 'var(--bfc-base-c-2)',
      cursor: 'pointer',
      padding: 'var(--bfs4)',
      margin: '1px var(--bfs4) 0px 0px'
    });
  },
  dropdownIndicator: function dropdownIndicator(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: state.isDisabled ? 'var(--bfc-base-c-2)' : 'var(--bfc-theme-1)',
      cursor: 'pointer',
      padding: 'var(--bfs4)',
      marginRight: 'var(--bfs8)'
    });
  },
  input: function input(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: 'var(--bfc-base-c-1)',
      fontFamily: 'inherit',
      fontSize: 'var(--bf-font-size-l)'
    });
  },
  menuPortal: function menuPortal(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      zIndex: 9999
    });
  },
  menu: function menu(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      backgroundColor: 'var(--bfc-base-3)',
      boxShadow: 'none',
      borderRadius: 'none',
      marginTop: 0,
      zIndex: 2
    });
  },
  menuList: function menuList(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      padding: 0,
      boxShadow: '0 0 0 1px var(--bfc-theme-3)',
      borderRadius: '0 0 var(--bfl-border-radius) var(--bfl-border-radius)'
    });
  },
  placeholder: function placeholder(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: state.isFocused ? 'var(--bfc-base-c)' : 'var(--bfc-base-c-2)',
      fontSize: 'var(--bf-font-size-l)'
    });
  },
  singleValue: function singleValue(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: 'var(--bfc-base-c)',
      display: state.selectProps.menuIsOpen && 'none',
      fontSize: 'var(--bf-font-size-l)'
    });
  },
  option: function option(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      display: 'flex',
      justifyContent: !state.isMulti ? 'space-between' : 'normal',
      alignItems: 'baseline',
      padding: '7px 12px',
      backgroundColor: state.isDisabled ? 'var(--bfc-base-dimmed)' : state.isFocused ? 'var(--bfc-base-1)' : 'var(--bfc-base-3)',
      color: 'var(--bfc-base-c)',
      '& .bf-select-checkbox': {
        marginRight: 'var(--bfs8)',
        color: 'var(--bfc-theme)'
      },
      '& .bf-select-selected-icon': {
        color: 'var(--bfc-base-c-theme)',
        marginLeft: 'var(--bfs4)'
      },
      '&:hover': {
        backgroundColor: state.isDisabled ? 'var(--bfc-base-dimmed)' : 'var(--bfc-base-1)',
        cursor: state.isDisabled ? 'default' : 'pointer'
      },
      fontSize: 'var(--bf-font-size-l)',
      fontWeight: state.isSelected ? 600 : 400,
      wordBreak: 'break-all'
    });
  },
  multiValue: function multiValue(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      backgroundColor: state.isDisabled ? 'var(--bfc-base-c-inverted-2)' : 'var(--bfc-theme-c-2)',
      borderRadius: '3px'
    });
  },
  multiValueLabel: function multiValueLabel(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: state.isDisabled ? 'var(--bfc-base-1)' : 'var(--bfc-base-c-theme)',
      fontSize: 'var(--bf-font-size-m)'
    });
  },
  multiValueRemove: function multiValueRemove(provided, state) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      color: state.isDisabled ? 'var(--bfc-base-1)' : state.isFocused ? 'var(--bfc-theme-c-1)' : 'var(--bfc-base-c-theme)',
      borderRadius: 'unset',
      borderTopRightRadius: '3px',
      borderBottomRightRadius: '3px',
      paddingLeft: '2px',
      paddingRight: '2px',
      marginLeft: '2px',
      background: state.isFocused && 'var(--bfc-theme-1)',
      '&:hover': {
        color: 'var(--bfc-theme-c-1)',
        cursor: 'pointer',
        background: 'var(--bfc-theme-1)'
      },
      '&:active': {
        background: 'var(--bfc-theme-2)'
      },
      svg: {
        marginTop: '1px'
      }
    });
  },
  group: function group(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      padding: '6px 0',
      '&:first-child': {
        marginTop: '4px'
      }
    });
  },
  groupHeading: function groupHeading(provided) {
    return _objectSpread(_objectSpread({}, provided), {}, {
      textTransform: 'capitalize',
      color: 'var(--bfc-base-c-2)',
      fontSize: '12px',
      marginBottom: '2px'
    });
  }
};
exports.selectStyles = selectStyles;
var selectComponents = {
  DropdownIndicator: _overrides.DropdownIndicator,
  Input: _overrides.CustomInput,
  MenuList: _overrides.CustomMenuList,
  ClearIndicator: _overrides.ClearIndicator,
  Option: _overrides.CustomOption
}; // Styleguidist hack, fuck you

/**
 *  Select component - dropdown list
 */

exports.selectComponents = selectComponents;

var Select = function Select() {
  return /*#__PURE__*/_react.default.createElement("div", null);
}; // Declare here so it can be used in HOC


Select.propTypes = {
  /** Required label text */
  label: _propTypes.default.string.isRequired,

  /** Hide label text, will add label prop as aria-label for screen readers */
  hideLabel: _propTypes.default.bool,

  /** Disables the Select component */
  isDisabled: _propTypes.default.bool,

  /** Available states: `theme` (default) and `alert` */
  state: _propTypes.default.oneOf(['theme', 'alert']),

  /** Description text to show more information */
  description: _propTypes.default.string,

  /** Feedback text below the Select component */
  feedback: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),

  /** Required prop indicating mandatory field */
  required: _propTypes.default.bool,

  /** Bool to mark Select component required, but hides the required label */
  requiredNoLabel: _propTypes.default.bool,

  /** Marks Select component as optional */
  optional: _propTypes.default.bool,

  /** Adds icon to clear input field */
  isClearable: _propTypes.default.bool,

  /** Props for the containing `div` element */
  containerProps: _propTypes.default.object,

  /** Unique id to use for select and label */
  inputId: _propTypes.default.string
};
/**
 *  Select HOC
 */

var SelectHOC = function SelectHOC(Selector) {
  // eslint-disable-next-line
  // @ts-ignore
  var GeneratedSelect = function GeneratedSelect(_ref) {
    var label = _ref.label,
        hideLabel = _ref.hideLabel,
        isDisabled = _ref.isDisabled,
        state = _ref.state,
        feedback = _ref.feedback,
        required = _ref.required,
        description = _ref.description,
        requiredNoLabel = _ref.requiredNoLabel,
        optional = _ref.optional,
        containerProps = _ref.containerProps,
        inputId = _ref.inputId,
        props = _objectWithoutProperties(_ref, ["label", "hideLabel", "isDisabled", "state", "feedback", "required", "description", "requiredNoLabel", "optional", "containerProps", "inputId"]);

    var selectId = (0, _useUniqueId.default)(inputId);
    return /*#__PURE__*/_react.default.createElement("div", _extends({}, containerProps, {
      /* spread first so we can override className */
      className: (0, _classnames.default)(containerProps && containerProps.className, {
        'bf-select-container': true
      }, {
        'bf-select-disabled': isDisabled
      }, {
        'bf-select-alert': !isDisabled && state === 'alert'
      }),
      "data-testid": "bf-select-container"
    }), !hideLabel && /*#__PURE__*/_react.default.createElement(_Label.default, {
      htmlFor: selectId,
      required: !isDisabled && required && !requiredNoLabel,
      optional: optional,
      disabled: isDisabled
    }, label), description && /*#__PURE__*/_react.default.createElement(_common.Description, null, description), /*#__PURE__*/_react.default.createElement(Selector, _extends({
      inputId: selectId,
      placeholder: "",
      components: selectComponents,
      styles: selectStyles,
      isDisabled: isDisabled,
      classNamePrefix: "bf-select",
      required: !isDisabled && (required || requiredNoLabel),
      "aria-label": label,
      hideSelectedOptions: false,
      closeMenuOnSelect: props.isMulti ? false : true
    }, props)), feedback && /*#__PURE__*/_react.default.createElement(_common.Feedback, null, feedback));
  }; // eslint-disable-next-line
  // @ts-ignore


  GeneratedSelect.defaultProps = {
    hideLabel: false,
    isDisabled: false,
    required: false,
    requiredNoLabel: false,
    optional: false
  }; // eslint-disable-next-line
  //@ts-ignore

  GeneratedSelect.propTypes = Select.propTypes;
  return GeneratedSelect;
}; // this is somewhat useless on it's own
// has to be combined with one of the Select's props


var SelectComponent = SelectHOC(_reactSelect.default);
SelectComponent.displayName = 'Select'; // Async Select

var AsyncSelect = SelectHOC(_async.default);
exports.AsyncSelect = AsyncSelect;
AsyncSelect.displayName = 'AsyncSelect'; // Creatable Select

var CreatableSelect = SelectHOC(_creatable.default);
exports.CreatableSelect = CreatableSelect;
CreatableSelect.displayName = 'CreatableSelect'; // Async Creatable Select

var AsyncCreatableSelect = SelectHOC(_asyncCreatable.default);
exports.AsyncCreatableSelect = AsyncCreatableSelect;
AsyncCreatableSelect.displayName = 'AsyncCreatableSelect';
var _default = SelectComponent;
exports.default = _default;