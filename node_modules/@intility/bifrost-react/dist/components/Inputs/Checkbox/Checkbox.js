"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeRegularSvgIcons = require("@fortawesome/free-regular-svg-icons");

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _assets = require("../../../assets");

var _Icon = _interopRequireDefault(require("../../Visual/Icon"));

var _useUniqueId = _interopRequireDefault(require("../../../hooks/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Checkbox, radio button, or a switch toggle
 */
var Checkbox = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var label = _ref.label,
      checked = _ref.checked,
      indeterminate = _ref.indeterminate,
      hideLabel = _ref.hideLabel,
      type = _ref.type,
      button = _ref.button,
      disabled = _ref.disabled,
      className = _ref.className,
      id = _ref.id,
      align = _ref.align,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["label", "checked", "indeterminate", "hideLabel", "type", "button", "disabled", "className", "id", "align", "style"]);

  var checkboxId = (0, _useUniqueId.default)(id);
  var isRadio = type === 'radio';
  var isSwitch = type === 'switch';
  var icon = checked ? _freeSolidSvgIcons.faCheckSquare : _freeRegularSvgIcons.faSquare;
  if (isRadio) icon = checked ? _freeSolidSvgIcons.faDotCircle : _freeRegularSvgIcons.faCircle;
  if (indeterminate) icon = _freeRegularSvgIcons.faSquare;
  if (!align) align = isSwitch ? 'right' : 'left';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('bf-checkbox-wrapper', "bf-checkbox-".concat(align), className, {
      'bf-checkbox-indeterminate': indeterminate,
      'bf-switch-wrapper': isSwitch,
      'bf-checkbox-hidelabel': hideLabel
    })
  }, /*#__PURE__*/_react.default.createElement("input", _extends({
    className: "bf-checkbox",
    type: isRadio ? 'radio' : 'checkbox',
    checked: checked,
    disabled: disabled,
    id: checkboxId,
    "data-testid": "bf-checkbox",
    ref: ref
  }, hideLabel && typeof label === 'string' ? {
    'aria-label': label
  } : {}, props)), /*#__PURE__*/_react.default.createElement("label", {
    className: (0, _classnames.default)('bf-checkbox-label', {
      'bf-button': button
    }),
    htmlFor: checkboxId,
    style: style,
    "data-testid": "bf-checkbox-label"
  }, !isSwitch && /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-checkbox-icon"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    fixedWidth: true,
    icon: icon
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-checkbox-label-text"
  }, label), isSwitch && /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-switch"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-switch-thumb"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: checked ? _assets.faCheck : _assets.faTimes
  })))));
});
Checkbox.propTypes = {
  /** Label text */
  label: _propTypes.default.node,

  /** Checked state */
  checked: _propTypes.default.bool,

  /** When checked state is not known (useful for showing the state of a group of checkboxes) */
  indeterminate: _propTypes.default.bool,

  /** Change event callback */
  onChange: _propTypes.default.func,

  /** Checkbox type: `checkbox` (default), `radio` or `switch` */
  type: _propTypes.default.oneOf(['checkbox', 'radio', 'switch']),

  /** Display as a button */
  button: _propTypes.default.bool,

  /** Hide label text, will add label prop as aria-label for screen readers */
  hideLabel: _propTypes.default.bool,

  /** Disable the checkbox */
  disabled: _propTypes.default.bool,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Unique id for input and label */
  id: _propTypes.default.string,

  /** Inline CSS styles */
  style: _propTypes.default.object,

  /** Align checkbox icon 'left' or 'right' of label text ('left' is default, except when type='switch') */
  align: _propTypes.default.oneOf(['left', 'right'])
};
Checkbox.defaultProps = {
  hideLabel: false,
  type: 'checkbox',
  button: false,
  disabled: false,
  className: '',
  id: '',
  style: {}
};
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;