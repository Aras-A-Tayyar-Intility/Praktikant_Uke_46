"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function numberRangePropType(isRequired, lowest, largest, props, propName, componentName) {
  componentName = componentName || 'ANONYMOUS';
  var value = props[propName];

  if (isRequired && value === null) {
    throw new Error("".concat(componentName, ": missing required prop: '").concat(propName, "'"));
  }

  if (typeof value !== 'number') {
    throw new Error("".concat(componentName, ": expected a number for: '").concat(propName, "' but got ").concat(value));
  }

  if (value < lowest || value > largest) {
    throw new Error("".concat(componentName, " ").concat(propName, ": ").concat(value, " is not between ").concat(lowest, " and ").concat(largest));
  }

  return null;
}

var percentage = numberRangePropType.bind(null, false, 0, 100); //@ts-ignore

percentage.isRequired = numberRangePropType.bind(null, true, 0, 100);
/**
 * Display progress as percentage
 */

var ProgressBar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var className = _ref.className,
      value = _ref.value,
      size = _ref.size,
      hideLabel = _ref.hideLabel,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["className", "value", "size", "hideLabel", "disabled"]);

  var cappedValue = Math.min(Math.max(0, value), 100);
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    title: hideLabel ? "".concat(value, "%") : '',
    "aria-label": hideLabel ? "".concat(value, "%") : '',
    ref: ref
  }, props, {
    className: (0, _classnames.default)(className, 'bf-progressbar-wrapper')
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('bf-progressbar', {
      'bf-progressbar-small': size === 'small',
      'bf-progressbar-large': size === 'large',
      'bf-progressbar-disabled': disabled
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-progressbar-progress",
    style: {
      width: "".concat(cappedValue, "%")
    }
  })), typeof value === 'number' && !hideLabel && /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-progressbar-label"
  }, value, "%"));
});
ProgressBar.propTypes = {
  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Current progress as percentage number (0-100) */
  //@ts-ignore
  value: percentage.isRequired,

  /** Available sizes: large, regular (default), and small */
  size: _propTypes.default.oneOf(['large', 'regular', 'small']),

  /** Hide percentage label, will add label prop as aria-label for screen readers */
  hideLabel: _propTypes.default.bool,

  /** Disable the control */
  disabled: _propTypes.default.bool
};
ProgressBar.defaultProps = {
  className: '',
  size: 'regular',
  hideLabel: false,
  disabled: false
};
ProgressBar.displayName = 'ProgressBar';
var _default = ProgressBar;
exports.default = _default;