"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _faSpinnerThird = require("../../../assets/faSpinnerThird");

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Spinner = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var icon = _ref.icon,
      overlay = _ref.overlay,
      size = _ref.size,
      label = _ref.label,
      labelProps = _ref.labelProps,
      spin = _ref.spin,
      pulse = _ref.pulse,
      onOverlayClick = _ref.onOverlayClick,
      props = _objectWithoutProperties(_ref, ["icon", "overlay", "size", "label", "labelProps", "spin", "pulse", "onOverlayClick"]);

  var spinner = /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('bf-spinner-container'),
    ref: ref
  }, props), /*#__PURE__*/_react.default.createElement(_Icon.default // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  , {
    icon: icon ? icon : _faSpinnerThird.faSpinnerThird,
    className: (0, _classnames.default)('bf-spinner-color', {
      'bf-icon-spinner': !spin && !pulse
    }),
    style: {
      height: size + 'px',
      width: size + 'px'
    },
    spin: spin,
    pulse: pulse
  }), label && /*#__PURE__*/_react.default.createElement("p", _extends({}, labelProps, {
    className: (0, _classnames.default)('bf-spinner-label', labelProps === null || labelProps === void 0 ? void 0 : labelProps.className)
  }), label));

  return overlay ? /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-overlay",
    role: "dialog",
    onClick: onOverlayClick
  }, spinner) : spinner;
});
Spinner.propTypes = {
  /** Adds overlay and center the spinner */
  overlay: _propTypes.default.bool,

  /** Spinner width and height in px */
  size: _propTypes.default.number,

  /** Label beneath the spinner */
  label: _propTypes.default.string,

  /** Customize the label */
  labelProps: _propTypes.default.object,

  /** Click event handler for overlay */
  onOverlayClick: _propTypes.default.func,

  /** Sends in custom icon */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** Sets static spin animation */
  spin: _propTypes.default.bool,

  /** Sets pulse animation */
  pulse: _propTypes.default.bool
};
Spinner.defaultProps = {
  size: 64
};
Spinner.displayName = 'Spinner';
var _default = Spinner;
exports.default = _default;