"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactAnimateHeight = _interopRequireDefault(require("react-animate-height"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useMediaQuery = _interopRequireDefault(require("../../../hooks/useMediaQuery"));

var _setRef = _interopRequireDefault(require("../../../utils/setRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var isScrollable = function isScrollable(element) {
  return element.scrollHeight > element.clientHeight;
};

var closestScrollableElement = function closestScrollableElement(element) {
  if (!element) {
    return document.body.parentElement;
  }

  if (isScrollable(element)) {
    return element;
  } // walk up the tree through recursion


  return closestScrollableElement(element.parentElement);
};

var SlideDown = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, _ref2) {
  var open = _ref.open,
      children = _ref.children,
      autoScroll = _ref.autoScroll,
      props = _objectWithoutProperties(_ref, ["open", "children", "autoScroll"]);

  var prefersReducedMotion = (0, _useMediaQuery.default)('(prefers-reduced-motion)');

  var _useState = (0, _react.useState)(open),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var divRef = (0, _react.useRef)(null);

  var _onAnimationEnd = function onAnimationEnd(e) {
    if (!open) setVisible(false);
    if (!divRef || !divRef.current || !e.newHeight) return;
    var el = divRef.current; // 1. find closest scrollable container

    var container = closestScrollableElement(el); // 2. check if that element's scroll position doesn't show all of ref element

    if (el.offsetTop + e.newHeight > container.scrollTop + container.clientHeight) {
      // 3. scroll as little as possible to make sure element is completely visible. stop at less than container height
      var height = Math.min(e.newHeight, container.clientHeight);
      container.scrollTo({
        top: container.scrollTop + height,
        behavior: 'smooth'
      });
    }
  };

  (0, _react.useEffect)(function () {
    if (open) setVisible(true);
  }, [open]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: function ref(r) {
      (0, _setRef.default)(_ref2, r);
      (0, _setRef.default)(divRef, r);
    }
  }, /*#__PURE__*/_react.default.createElement(_reactAnimateHeight.default, _extends({
    duration: prefersReducedMotion ? 0 : 200,
    easing: "ease",
    height: open ? 'auto' : 0
  }, props, {
    onAnimationEnd: function onAnimationEnd(e) {
      var _props$onAnimationEnd;

      props === null || props === void 0 ? void 0 : (_props$onAnimationEnd = props.onAnimationEnd) === null || _props$onAnimationEnd === void 0 ? void 0 : _props$onAnimationEnd.call(props, e);

      if (autoScroll) {
        _onAnimationEnd(e);
      }
    }
  }), (open || visible) && children));
});
SlideDown.propTypes = {
  /** Indicates if SlideDown content is open */
  open: _propTypes.default.bool.isRequired,

  /** Content to animate height of */
  children: _propTypes.default.node,

  /** Event triggered after animation end */
  onAnimationEnd: _propTypes.default.func,

  /** Automatically scroll to view expanded content */
  autoScroll: _propTypes.default.bool
};
var _default = SlideDown;
exports.default = _default;