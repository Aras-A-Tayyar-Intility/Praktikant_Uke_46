"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _Nav = _interopRequireDefault(require("./Nav.Group"));

var _Nav2 = _interopRequireDefault(require("./Nav.Item"));

var _NavContext = require("./NavContext.internal");

var _NavLocationContext = require("./NavLocationContext.internal");

var _useLocale = _interopRequireDefault(require("../../../hooks/useLocale"));

var _ = require("../../..");

var _assets = require("../../../assets");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// todo: for collapsed sidebar, focus input after expanding dropout

/**
 * A search input for use inside Nav, expandable in top bar or collapsible sidebar
 */
var NavSearch = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var className = _ref.className,
      _onSubmit = _ref.onSubmit,
      loading = _ref.loading,
      itemProps = _ref.itemProps,
      groupProps = _ref.groupProps,
      formProps = _ref.formProps,
      props = _objectWithoutProperties(_ref, ["className", "onSubmit", "loading", "itemProps", "groupProps", "formProps"]);

  var _useNav = (0, _NavContext.useNav)(),
      sideCollapsed = _useNav.sideCollapsed;

  var _useNavLocation = (0, _NavLocationContext.useNavLocation)(),
      where = _useNavLocation.where;

  var locale = (0, _useLocale.default)();

  var searchIcon = /*#__PURE__*/_react.default.createElement(_.Icon, {
    icon: loading ? _assets.fadSpinnerThird : _freeSolidSvgIcons.faSearch,
    spin: loading,
    className: (0, _classnames.default)({
      'bf-input-loading-icon': loading
    }),
    fixedWidth: true
  });

  var input = /*#__PURE__*/_react.default.createElement("form", _extends({
    noValidate: true,
    onSubmit: function onSubmit(e) {
      e.preventDefault();
      _onSubmit === null || _onSubmit === void 0 ? void 0 : _onSubmit(e);
    }
  }, formProps, {
    className: (0, _classnames.default)(formProps === null || formProps === void 0 ? void 0 : formProps.className, 'bf-input-icon-container', 'bf-nav-search-input', 'bf-input-outline', {
      'bf-input-icon-left': !_onSubmit,
      'bf-input-icon-right': !!_onSubmit
    })
  }), /*#__PURE__*/_react.default.createElement("input", _extends({
    placeholder: locale.search,
    "aria-label": locale.search
  }, props, {
    required: true // allows CSS to select based on value content using :valid
    ,
    className: "bf-input",
    ref: ref
  })), _onSubmit ? /*#__PURE__*/_react.default.createElement("button", _extends({
    className: "bf-input-icon bf-input-icon-button",
    "aria-label": locale.search
  }, where === 'top' ? {
    tabIndex: -1
  } : {}), searchIcon) : /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-input-icon"
  }, searchIcon));

  if (where === 'side' && sideCollapsed) {
    return /*#__PURE__*/_react.default.createElement(_Nav.default, _extends({
      icon: _freeSolidSvgIcons.faSearch
    }, groupProps, {
      className: (0, _classnames.default)(groupProps === null || groupProps === void 0 ? void 0 : groupProps.className, className, 'bf-nav-search-group')
    }), input);
  }

  if (where === 'top') {
    return /*#__PURE__*/_react.default.createElement(_Nav2.default, _extends({}, itemProps, {
      className: (0, _classnames.default)(itemProps === null || itemProps === void 0 ? void 0 : itemProps.className, className, 'bf-nav-search-item')
    }), input);
  }

  return /*#__PURE__*/_react.default.createElement(_Nav2.default, _extends({}, itemProps, {
    className: (0, _classnames.default)(itemProps === null || itemProps === void 0 ? void 0 : itemProps.className, className, 'bf-nav-search-item')
  }), input);
});
NavSearch.propTypes = {
  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Optional onSubmit handler for icon click / enter */
  onSubmit: _propTypes.default.func,

  /** Display a loading spinner in the input */
  loading: _propTypes.default.bool,

  /** Forwarded props for internal Nav.Item */
  itemProps: _propTypes.default.object,

  /** Forwarded props for internal Nav.Group (when used inside collapsed sidebar) */
  groupProps: _propTypes.default.object,

  /** Forwarded props for internal form element */
  formProps: _propTypes.default.object
};
NavSearch.displayName = 'Nav.Search';
var _default = NavSearch;
exports.default = _default;