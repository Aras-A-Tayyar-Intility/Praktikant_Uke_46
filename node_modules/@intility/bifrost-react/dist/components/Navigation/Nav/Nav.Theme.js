"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _ = require("../../..");

var _useLocale = _interopRequireDefault(require("../../../hooks/useLocale"));

var _Nav = _interopRequireDefault(require("./Nav.Group"));

var _Nav2 = _interopRequireDefault(require("./Nav.Header"));

var _NavLocationContext = require("./NavLocationContext.internal");

var _useUniqueId = _interopRequireDefault(require("../../../hooks/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * A `<Nav.Group>` pre-filled with radio buttons to toggle change color theme between 'dark', 'light', and 'system'
 */
var NavTheme = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var props = _extends({}, _ref);

  var _useTheme = (0, _.useTheme)(),
      theme = _useTheme.theme,
      setTheme = _useTheme.setTheme;

  var _useNavLocation = (0, _NavLocationContext.useNavLocation)(),
      where = _useNavLocation.where;

  var locale = (0, _useLocale.default)();
  var uid = (0, _useUniqueId.default)();
  return /*#__PURE__*/_react.default.createElement(_Nav.default, _extends({
    icon: _freeSolidSvgIcons.faAdjust,
    name: where === 'top' ? '' : locale.colorTheme,
    title: where === 'top' ? locale.colorTheme : ''
  }, props, {
    ref: ref
  }), where === 'top' && /*#__PURE__*/_react.default.createElement(_Nav2.default, null, locale.colorTheme), /*#__PURE__*/_react.default.createElement(_.Checkbox, {
    type: "radio",
    label: locale.dark,
    name: uid,
    checked: theme === 'dark',
    onChange: function onChange() {
      return setTheme('dark');
    }
  }), /*#__PURE__*/_react.default.createElement(_.Checkbox, {
    type: "radio",
    label: locale.light,
    name: uid,
    checked: theme === 'light',
    onChange: function onChange() {
      return setTheme('light');
    }
  }), /*#__PURE__*/_react.default.createElement(_.Checkbox, {
    type: "radio",
    label: locale.system,
    name: uid,
    checked: theme === 'system',
    onChange: function onChange() {
      return setTheme('system');
    }
  }));
});
NavTheme.displayName = 'Nav.Theme';
var _default = NavTheme;
exports.default = _default;