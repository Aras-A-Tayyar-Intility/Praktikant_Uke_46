"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeRegularSvgIcons = require("@fortawesome/free-regular-svg-icons");

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _ = require("../../..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// used to determine if anything is gonna render
// falsy elements do not render,
// but child arrays are truthy even though their items are falsy
var hasTruthyChildren = function hasTruthyChildren(children) {
  if (Array.isArray(children)) {
    return children.some(hasTruthyChildren);
  }

  return !!children;
};
/**
 * Item for Nav component
 */


var NavItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      icon = _ref.icon,
      className = _ref.className,
      hideCircle = _ref.hideCircle,
      props = _objectWithoutProperties(_ref, ["children", "icon", "className", "hideCircle"]);

  return /*#__PURE__*/_react.default.createElement("div", _extends({}, props, {
    className: (0, _classnames.default)('bf-nav-item', className, {
      'bf-nav-item-with-icon': icon,
      'bf-nav-item-icon-only': icon && !hasTruthyChildren(children)
    }),
    ref: ref
  }), icon && /*#__PURE__*/_react.default.createElement(_.Icon, {
    icon: icon,
    fixedWidth: true,
    className: "bf-nav-item-icon"
  }), children, !hideCircle && /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-nav-group-item-circle-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_.Icon, {
    icon: _freeRegularSvgIcons.faCircle,
    fixedWidth: true,
    className: "bf-nav-group-item-circle"
  }), /*#__PURE__*/_react.default.createElement(_.Icon, {
    icon: _freeSolidSvgIcons.faDotCircle,
    fixedWidth: true,
    className: "bf-nav-group-item-dot-circle"
  })));
});
NavItem.propTypes = {
  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Nav item content */
  children: _propTypes.default.node,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /* Hide Nav.Group > item circle */
  hideCircle: _propTypes.default.bool
};
NavItem.displayName = 'Nav.Item';
var _default = NavItem;
exports.default = _default;