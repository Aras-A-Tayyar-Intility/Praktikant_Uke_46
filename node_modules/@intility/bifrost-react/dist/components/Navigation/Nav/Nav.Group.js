"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _tippy = require("tippy.js");

var _Expander = _interopRequireDefault(require("./Expander.internal"));

var _ = require("../../..");

var _faAngleUp = require("../../../assets/faAngleUp");

var _faAngleDown = require("../../../assets/faAngleDown");

var _Nav = _interopRequireDefault(require("./Nav.Item"));

var _NavLocationContext = require("./NavLocationContext.internal");

var _useIsomorphicLayoutEffect = _interopRequireDefault(require("../../../hooks/useIsomorphicLayoutEffect"));

var _Dropdown = _interopRequireDefault(require("../../Interactive/Dropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// https://gist.github.com/dandelany/1ff06f4fa1f8d6f89c5e#gistcomment-3090249
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function recursiveCloneChildren(children, newProps) {
  return _react.default.Children.map(children, function (child) {
    if (! /*#__PURE__*/_react.default.isValidElement(child)) {
      return child;
    } // Eg. String has no props


    if (child.props) {
      newProps.children = recursiveCloneChildren(child.props.children, newProps);
      return /*#__PURE__*/_react.default.cloneElement(child, newProps);
    }

    return child;
  });
}
/**
 * Group of clickable items for Nav
 */


var NavGroup = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _tippyRef$current5;

  var active = _ref.active,
      name = _ref.name,
      icon = _ref.icon,
      children = _ref.children,
      className = _ref.className,
      autoScroll = _ref.autoScroll,
      props = _objectWithoutProperties(_ref, ["active", "name", "icon", "children", "className", "autoScroll"]);

  var _useNavLocation = (0, _NavLocationContext.useNavLocation)(),
      where = _useNavLocation.where,
      open = _useNavLocation.open;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      tippyVisible = _useState4[0],
      setTippyVisible = _useState4[1];

  var buttonRef = (0, _react.useRef)(null);
  var tippyRef = (0, _react.useRef)();
  var childrenRef = (0, _react.useRef)(null); // if active prop is undefined, set active class on group if any child <a> or <button> DOM node has an active class

  (0, _useIsomorphicLayoutEffect.default)(function () {
    if (childrenRef.current && buttonRef.current && active === undefined) {
      buttonRef.current.classList.toggle('active', childrenRef.current.querySelectorAll('a.active, button.active').length > 0);
    }
  });

  var closePopup = function closePopup() {
    var _tippyRef$current, _tippyRef$current$hid, _focus, _ref2, _tippyRef$current2;

    (_tippyRef$current = tippyRef.current) === null || _tippyRef$current === void 0 ? void 0 : (_tippyRef$current$hid = _tippyRef$current.hide) === null || _tippyRef$current$hid === void 0 ? void 0 : _tippyRef$current$hid.call(_tippyRef$current);
    (_focus = (_ref2 = (_tippyRef$current2 = tippyRef.current) === null || _tippyRef$current2 === void 0 ? void 0 : _tippyRef$current2.reference).focus) === null || _focus === void 0 ? void 0 : _focus.call(_ref2);
  };

  var togglePopup = function togglePopup() {
    var _tippyRef$current3;

    if ((_tippyRef$current3 = tippyRef.current) !== null && _tippyRef$current3 !== void 0 && _tippyRef$current3.state.isShown) {
      closePopup();
    } else {
      var _tippyRef$current4;

      (_tippyRef$current4 = tippyRef.current) === null || _tippyRef$current4 === void 0 ? void 0 : _tippyRef$current4.show();
    }
  };

  (0, _react.useEffect)(function () {
    if (open) (0, _tippy.hideAll)();
  }, [open]);
  var handleClick = (0, _react.useCallback)(function (e) {
    e.preventDefault();

    if (!open) {
      togglePopup();
    } else {
      setExpanded(!expanded);
    }
  }, [setExpanded, expanded, open]);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, props, {
    ref: ref,
    className: (0, _classnames.default)('bf-nav-group', className)
  }), /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    className: (0, _classnames.default)('bf-nav-group-button', {
      'bf-nav-group-button-expanded': expanded,
      'bf-nav-group-dropout-visible': tippyVisible,
      active: active
    }),
    "aria-expanded": !open ? (_tippyRef$current5 = tippyRef.current) === null || _tippyRef$current5 === void 0 ? void 0 : _tippyRef$current5.state.isShown : expanded,
    onClick: handleClick,
    ref: buttonRef
  }, /*#__PURE__*/_react.default.createElement(_Nav.default, {
    icon: icon
  }, name, open && /*#__PURE__*/_react.default.createElement("span", {
    className: "bf-nav-expand-icon"
  }, /*#__PURE__*/_react.default.createElement(_.Icon, {
    icon: expanded ? _faAngleUp.faAngleUp : _faAngleDown.faAngleDown,
    fixedWidth: true
  })))), (where === 'top' || where === 'side' && !open) && /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
    placement: where === 'top' ? 'bottom-end' : 'right-start',
    onCreate: function onCreate(instance) {
      return tippyRef.current = instance;
    },
    onShow: function onShow() {
      setTippyVisible(true);
      (0, _tippy.hideAll)();
    },
    onHide: function onHide() {
      return setTippyVisible(false);
    },
    className: "bf-nav-group-dropout",
    popperOptions: {
      strategy: 'fixed'
    },
    reference: buttonRef,
    content: /*#__PURE__*/_react.default.createElement("div", {
      className: "bf-nav-group-dropout-content",
      onClick: function onClick(e) {
        if (e.target.closest('.bf-nav-item')) {
          closePopup();
        }
      }
    }, where === 'side' && name ? /*#__PURE__*/_react.default.createElement("div", {
      className: "bf-nav-group-dropout-title"
    }, name) : null, children)
  }), where !== 'top' && /*#__PURE__*/_react.default.createElement(_Expander.default, {
    expanded: expanded,
    autoScroll: autoScroll
  }, children), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: 'none'
    },
    ref: childrenRef
  }, recursiveCloneChildren(children, {
    id: undefined,
    htmlFor: undefined,
    name: undefined
  })));
});
NavGroup.propTypes = {
  /** Group button label */
  name: _propTypes.default.node,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Nav group content (if not a simple string, also supply text version as title) */
  children: _propTypes.default.node,

  /** Set active to true when a the current page is a sublink of this group */
  active: _propTypes.default.bool,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** Automatically scroll to view expanded content */
  autoScroll: _propTypes.default.bool
};
NavGroup.displayName = 'Nav.Group';
var _default = NavGroup;
exports.default = _default;