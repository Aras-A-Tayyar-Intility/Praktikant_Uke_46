"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _IntilityLogo = _interopRequireDefault(require("../Sidebar/IntilityLogo.internal"));

var _Nav = _interopRequireDefault(require("./Nav.Item"));

var _NavLocationContext = _interopRequireDefault(require("./NavLocationContext.internal"));

var _useLocale = _interopRequireDefault(require("../../../hooks/useLocale"));

var _ = require("../../..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var collapsedAppNameMaxLength = 4;

function abbreviate(name) {
  var matches = name.match(/\b([A-Z])/gi);
  if (!matches) return name;
  return matches.join('').slice(0, collapsedAppNameMaxLength);
}
/**
 * Nav sidebar
 */


var NavSide = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _collapsedAppName;

  var children = _ref.children,
      appName = _ref.appName,
      className = _ref.className,
      hideCollapse = _ref.hideCollapse,
      collapsedProp = _ref.collapsed,
      onCollapsedChange = _ref.onCollapsedChange,
      collapsedAppName = _ref.collapsedAppName,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["children", "appName", "className", "hideCollapse", "collapsed", "onCollapsedChange", "collapsedAppName", "logoHref", "logoOnClick"]);

  var _useLocalStorage = (0, _.useLocalStorage)('bfNavSideCollapsed', false),
      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),
      collapsedState = _useLocalStorage2[0],
      setCollapsedState = _useLocalStorage2[1];

  var collapsed = collapsedProp !== null && collapsedProp !== void 0 ? collapsedProp : collapsedState;
  var setCollapsed = onCollapsedChange !== null && onCollapsedChange !== void 0 ? onCollapsedChange : setCollapsedState;
  var locale = (0, _useLocale.default)();

  if (!collapsedAppName && typeof appName === 'string') {
    collapsedAppName = abbreviate(appName || '');
  }

  var collapseButtonLabel = collapsed ? locale.expand : locale.collapse;
  var isStandalone = !!appName;
  return /*#__PURE__*/_react.default.createElement(_NavLocationContext.default, {
    where: "side",
    open: !collapsed
  }, /*#__PURE__*/_react.default.createElement("nav", _extends({}, props, {
    className: (0, _classnames.default)('bf-nav bf-nav-side', className, {
      'bf-nav-side-standalone': isStandalone,
      'bf-nav-side-collapsed': collapsed
    }),
    ref: ref
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-intility-logo"
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/_react.default.createElement(_IntilityLogo.default, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-nav-side-content"
  }, isStandalone && /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-nav-side-appname"
  }, collapsed ? (_collapsedAppName = collapsedAppName) === null || _collapsedAppName === void 0 ? void 0 : _collapsedAppName.slice(0, collapsedAppNameMaxLength) : appName), children), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-nav bf-nav-side-bottom"
  }, !hideCollapse && /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setCollapsed(!collapsed);
    },
    className: "bf-nav-side-collapse-button"
  }, /*#__PURE__*/_react.default.createElement(_Nav.default, {
    icon: collapsed ? _freeSolidSvgIcons.faAngleRight : _freeSolidSvgIcons.faAngleLeft
  }, collapseButtonLabel)))));
});
NavSide.propTypes = {
  /** One or more `<Sidebar.Item>`s */
  children: _propTypes.default.node,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Application name (only use if no TopBar) */
  appName: _propTypes.default.node,

  /** Abbreviated application name (max 4 characters, only use if no TopBar and you dont like the auto-generated one) */
  collapsedAppName: _propTypes.default.string,

  /** Hide collapse button */
  hideCollapse: _propTypes.default.bool,

  /** Override sidebar collapsed state */
  collapsed: _propTypes.default.bool,

  /** Callback for when collapsed changes  */
  onCollapsedChange: _propTypes.default.func,

  /** Custom url for clickable logo (default '/') */
  logoHref: _propTypes.default.string,

  /** Clickable logo event */
  logoOnClick: _propTypes.default.func
};
NavSide.defaultProps = {
  logoHref: '/'
};
NavSide.displayName = 'Nav.Side';
var _default = NavSide;
exports.default = _default;