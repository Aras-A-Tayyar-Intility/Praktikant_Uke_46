"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _useTheme2 = _interopRequireDefault(require("../../../hooks/useTheme"));

var _useSidebarCollapsed = require("./hooks/useSidebarCollapsed");

var _IntilityLogo = _interopRequireDefault(require("./IntilityLogo.internal"));

var _Sidebar = _interopRequireDefault(require("./Sidebar.Item"));

var _Sidebar2 = _interopRequireDefault(require("./Sidebar.Group"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var collapsedAppNameMaxLength = 4;
var initiallyCollapsed = typeof window !== 'undefined' && window.localStorage && localStorage.bfSidebarCollapsed === 'true';

function abbreviate(name) {
  var matches = name.match(/\b([A-Z])/gi);
  if (!matches) return name;
  return matches.join('').slice(0, collapsedAppNameMaxLength);
}
/**
 * @description deprecated
 * @deprecated since 2.2
 */


var Sidebar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      appName = _ref.appName,
      _ref$collapsedAppName = _ref.collapsedAppName,
      collapsedAppName = _ref$collapsedAppName === void 0 ? '' : _ref$collapsedAppName,
      collapsible = _ref.collapsible,
      collapseLabel = _ref.collapseLabel,
      expandLabel = _ref.expandLabel,
      enableDarkModeToggle = _ref.enableDarkModeToggle,
      darkLightLabel = _ref.darkLightLabel,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["children", "className", "appName", "collapsedAppName", "collapsible", "collapseLabel", "expandLabel", "enableDarkModeToggle", "darkLightLabel", "logoHref", "logoOnClick"]);

  (0, _react.useEffect)(function () {
    if (process.env.NODE_ENV === 'development') {
      console.warn('<Sidebar> component is deprecated and will be removed in the next major release of Bifrost, use <Nav side={...}> or <Nav.Side> instead\n\n');
    }
  }, []);

  var _useState = (0, _react.useState)(!collapsible ? false : initiallyCollapsed),
      _useState2 = _slicedToArray(_useState, 2),
      collapsed = _useState2[0],
      setCollapsed = _useState2[1];

  var _useTheme = (0, _useTheme2.default)(),
      theme = _useTheme.theme,
      setTheme = _useTheme.setTheme;

  var collapseButtonLabel = collapsed ? expandLabel : collapseLabel;
  var isStandalone = !!appName;

  var toggleCollapsed = function toggleCollapsed() {
    return setCollapsed(function (x) {
      localStorage.bfSidebarCollapsed = !x;
      return !x;
    });
  };

  if (appName && !collapsedAppName) collapsedAppName = abbreviate(appName);
  return /*#__PURE__*/_react.default.createElement(_useSidebarCollapsed.SidebarContext.Provider, {
    value: collapsed
  }, /*#__PURE__*/_react.default.createElement("nav", _extends({
    className: (0, _classnames.default)('bf-sidebar', className, {
      'bf-sidebar-collapsed': collapsed,
      'bf-sidebar-collapsible': collapsible,
      'bf-sidebar-standalone': isStandalone
    }),
    ref: ref
  }, props), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-intility-logo"
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/_react.default.createElement(_IntilityLogo.default, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-sidebar-content"
  }, isStandalone && /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-sidebar-appname",
    title: collapsed ? appName : ''
  }, collapsed ? collapsedAppName.slice(0, collapsedAppNameMaxLength) : appName), children), isStandalone && enableDarkModeToggle && /*#__PURE__*/_react.default.createElement("a", {
    href: "#",
    onClick: function onClick(e) {
      e.preventDefault();
      setTheme(theme === 'dark' ? 'light' : 'dark');
    }
  }, /*#__PURE__*/_react.default.createElement(_Sidebar.default, {
    icon: _freeSolidSvgIcons.faAdjust,
    className: "bf-sidebar-darkmode-toggle"
  }, darkLightLabel)), collapsible && /*#__PURE__*/_react.default.createElement("a", {
    href: "#",
    onClick: function onClick(e) {
      e.preventDefault();
      toggleCollapsed();
    }
  }, /*#__PURE__*/_react.default.createElement(_Sidebar.default, {
    className: "bf-sidebar-collapse-button",
    icon: collapsed ? _freeSolidSvgIcons.faAngleRight : _freeSolidSvgIcons.faAngleLeft
  }, collapseButtonLabel))));
});
Sidebar.propTypes = {
  /** One or more `<Sidebar.Item>`s */
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.arrayOf(_propTypes.default.node)]),

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Application name (only use if no TopBar) */
  appName: _propTypes.default.string,

  /** Abbreviated application name (max 4 characters, only use if no TopBar and you dont like the auto-generated one) */
  collapsedAppName: _propTypes.default.string,

  /** Enable collapse button (default true) */
  collapsible: _propTypes.default.bool,

  /** Text to display when expanded (default 'Collapse') */
  collapseLabel: _propTypes.default.string,

  /** Text to display when collapsed (default 'Expand') */
  expandLabel: _propTypes.default.string,

  /** Dark mode toggle button only appears for standalone sidebar, but can still be hidden if you set this to false */
  enableDarkModeToggle: _propTypes.default.bool,

  /** Text to display for dark mode toggle button (default 'Dark/Light') */
  darkLightLabel: _propTypes.default.string,

  /** Custom url for clickable logo (default '/') */
  logoHref: _propTypes.default.string,

  /** Clickable logo event */
  logoOnClick: _propTypes.default.func
};
Sidebar.defaultProps = {
  className: '',
  appName: '',
  collapsedAppName: '',
  collapsible: true,
  collapseLabel: 'Collapse',
  expandLabel: 'Expand',
  darkLightLabel: 'Dark/Light',
  enableDarkModeToggle: true,
  logoHref: '/'
};
Sidebar.Item = _Sidebar.default;
Sidebar.Group = _Sidebar2.default;
Sidebar.displayName = 'Sidebar';
var _default = Sidebar;
exports.default = _default;