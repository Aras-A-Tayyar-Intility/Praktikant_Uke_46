"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _freeSolidSvgIcons = require("@fortawesome/free-solid-svg-icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _TopBar = _interopRequireDefault(require("./TopBar.Item"));

var _TopBar2 = _interopRequireDefault(require("./TopBar.Group"));

var _Icon = _interopRequireDefault(require("../../Visual/Icon"));

var _IntilityLogo = _interopRequireDefault(require("../Sidebar/IntilityLogo.internal"));

var _useTheme2 = _interopRequireDefault(require("../../../hooks/useTheme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * @description deprecated
 * @deprecated since 2.2
 */
var TopBar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var appName = _ref.appName,
      className = _ref.className,
      enableDarkModeToggle = _ref.enableDarkModeToggle,
      children = _ref.children,
      hideLogo = _ref.hideLogo,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["appName", "className", "enableDarkModeToggle", "children", "hideLogo", "logoHref", "logoOnClick"]);

  (0, _react.useEffect)(function () {
    if (process.env.NODE_ENV === 'development') {
      console.warn('<TopBar> component is deprecated and will be removed in the next major release of Bifrost, use <Nav top={...}> or <Nav.Top> instead\n\n');
    }
  }, []);

  var _useTheme = (0, _useTheme2.default)(),
      theme = _useTheme.theme,
      setTheme = _useTheme.setTheme;

  return /*#__PURE__*/_react.default.createElement("header", _extends({
    "data-testid": "bf-topbar",
    className: (0, _classnames.default)(className, 'bf-topbar'),
    ref: ref
  }, props), !hideLogo && /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-intility-logo",
    "data-testid": "bf-intility-logo"
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/_react.default.createElement(_IntilityLogo.default, null))), appName && /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "bf-topbar-appname-container",
    className: "bf-topbar-appname-container"
  }, appName), /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-topbar-items-container",
    "data-testid": "bf-topbar-items-container"
  }, children, enableDarkModeToggle && /*#__PURE__*/_react.default.createElement("a", {
    className: "bf-darkmode-toggle",
    href: "#",
    onClick: function onClick(e) {
      e.preventDefault();
      setTheme(theme === 'dark' ? 'light' : 'dark');
    },
    title: "Toggle dark mode"
  }, /*#__PURE__*/_react.default.createElement(_TopBar.default, null, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: _freeSolidSvgIcons.faAdjust
  })))));
});
TopBar.Item = _TopBar.default;
TopBar.Group = _TopBar2.default;
TopBar.propTypes = {
  /** Application name, either a string or fragment */
  appName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired,

  /** Dark mode toggle button is included by default, set to `false` to hide */
  enableDarkModeToggle: _propTypes.default.bool,

  /** Element(s) shown on the right side of the bar */
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Hides the Intility logo */
  hideLogo: _propTypes.default.bool,

  /** Custom url for clickable logo (default '/') */
  logoHref: _propTypes.default.string,

  /** Clickable logo event */
  logoOnClick: _propTypes.default.func
};
TopBar.defaultProps = {
  enableDarkModeToggle: true,
  children: null,
  hideLogo: false,
  logoHref: '/'
};
TopBar.displayName = 'TopBar';
TopBar.Item.displayName = 'TopBar.Item';
TopBar.Group.displayName = 'TopBar.Group';
var _default = TopBar;
exports.default = _default;