"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _TabBar = _interopRequireDefault(require("./TabBar.Item"));

var _Button = _interopRequireDefault(require("../../Inputs/Button"));

var _useOverflow2 = _interopRequireDefault(require("../../Interactive/Tabs/hooks/useOverflow"));

var _assets = require("../../../assets");

var _useMediaQuery = _interopRequireDefault(require("../../../hooks/useMediaQuery"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * TabBar component - switch between different content
 */
var TabBar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var className = _ref.className,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["className", "variant"]);

  var elRef = (0, _react.useRef)(null);

  var _useOverflow = (0, _useOverflow2.default)(elRef),
      refOverflow = _useOverflow.refOverflow,
      refScrollBegin = _useOverflow.refScrollBegin,
      refScrollEnd = _useOverflow.refScrollEnd;

  var isWide = (0, _useMediaQuery.default)('(min-width: 600px)');

  var handleArrowClick = function handleArrowClick(direction) {
    var elementRef = elRef.current;
    if (!elementRef) return;

    if (direction === 'left') {
      elementRef.scrollLeft -= elementRef.clientWidth / 2;
    } else {
      elementRef.scrollLeft += elementRef.clientWidth / 2;
    }
  };

  var scrollToTab = function scrollToTab(e) {
    var tab = e.target.closest('.bf-tab');

    if (tab) {
      if (!elRef.current) return;
      var container = elRef.current;
      var padding = isWide ? 28 : 16;
      var containerLeftSide = container.scrollLeft + padding; // first tab starts left on 28px

      var tabLeftSide = tab.offsetLeft;
      var containerRightSide = container.scrollLeft + container.offsetWidth;
      var tabRightSide = tabLeftSide + tab.clientWidth; // Right side of tab is out of view

      if (tabRightSide > containerRightSide - 15) {
        var scrollValue = tabRightSide - containerRightSide - 12 + (isWide ? 0 : 26) + (variant ? 4 : 0);
        container.scrollLeft += scrollValue;
      } // Left side of tab is out of view
      else if (tabLeftSide < containerLeftSide + 15) {
          var _scrollValue = containerLeftSide - tabLeftSide + 10 + (isWide ? 0 : 16) + (variant ? 0 : 0);

          container.scrollLeft -= _scrollValue;
        }
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('bf-tabs-container', {
      'bf-tabs-styled': variant === 'styled'
    }),
    ref: ref
  }, props), /*#__PURE__*/_react.default.createElement("div", {
    ref: elRef,
    className: (0, _classnames.default)('bf-tabs', className),
    "data-testid": "bf-tabs",
    onClick: function onClick(e) {
      return scrollToTab(e);
    }
  }, props.children), /*#__PURE__*/_react.default.createElement(_Button.default, {
    className: (0, _classnames.default)('bf-tab-left', {
      'bf-tab-arrow-hidden': !refOverflow || refScrollBegin
    }),
    onClick: function onClick() {
      return handleArrowClick('left');
    },
    icon: _assets.faAngleLeft,
    tabIndex: -1
  }), /*#__PURE__*/_react.default.createElement(_Button.default, {
    className: (0, _classnames.default)('bf-tab-right', {
      'bf-tab-arrow-hidden': !refOverflow || refScrollEnd
    }),
    onClick: function onClick() {
      return handleArrowClick('right');
    },
    icon: _assets.faAngleRight,
    tabIndex: -1
  }));
});
TabBar.propTypes = {
  /** CSS classname(s) */
  className: _propTypes.default.string,

  /** Collection of TabBar.Item components */
  children: _propTypes.default.node,

  /** Can be used to change the menu's appearance. Available variants: 'default' (default) and 'styled' */
  variant: _propTypes.default.oneOf(['default', 'styled'])
};
TabBar.defaultProps = {
  variant: 'default'
};
TabBar.Item = _TabBar.default;
TabBar.displayName = 'TabBar';
var _default = TabBar;
exports.default = _default;