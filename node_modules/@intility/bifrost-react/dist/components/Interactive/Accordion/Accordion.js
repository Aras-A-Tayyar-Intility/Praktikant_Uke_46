"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Accordion = _interopRequireDefault(require("./Accordion.Item"));

var _useAccordionContext = require("./hooks/useAccordionContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Accordion component - vertical menu with collapsible sections
 */
var Accordion = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      active = _ref.active,
      onChange = _ref.onChange,
      noBorder = _ref.noBorder,
      variant = _ref.variant,
      mode = _ref.mode,
      props = _objectWithoutProperties(_ref, ["children", "className", "active", "onChange", "noBorder", "variant", "mode"]);

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      activeKey = _useState2[0],
      setActiveKey = _useState2[1];

  var handleToggle = (0, _react.useCallback)(function (activeKey) {
    if (onChange) {
      onChange(activeKey);
    } else {
      setActiveKey(activeKey);
    }
  }, [activeKey, setActiveKey, onChange]);
  var context = (0, _react.useMemo)(function () {
    return {
      activeItem: onChange ? active : activeKey,
      onToggle: handleToggle,
      variant: variant
    };
  }, [activeKey, handleToggle, active, variant]);
  return /*#__PURE__*/_react.default.createElement(_useAccordionContext.AccordionContext.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement("div", _extends({
    ref: ref,
    "data-testid": "bf-accordion-container",
    className: (0, _classnames.default)(className, 'bf-accordion-container', {
      'bf-accordion-noborder': noBorder,
      'bf-accordion-styled': variant === 'styled',
      'bf-accordion-compact': mode === 'compact',
      'bf-accordion-responsive': mode === 'responsive'
    })
  }, props), children));
});
Accordion.propTypes = {
  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Required when using onChange - Overrides the internal state which allows you to control which Accordion.Item should be opened. */
  active: _propTypes.default.string,

  /** Overrides the internal onChange. This will be fired when clicking on Accordion.Item */
  onChange: _propTypes.default.func,

  /** One or more accordion items */
  children: _propTypes.default.node,

  /** Hide outermost border */
  noBorder: _propTypes.default.bool,

  /** Alternative 'styled' variant */
  variant: _propTypes.default.oneOf(['default', 'styled']),

  /** Choose between 'desktop' mode (default), 'compact', or 'responsive' (compact for screens smaller than 600px only)  */
  mode: _propTypes.default.oneOf(['default', 'responsive', 'compact'])
};
Accordion.defaultProps = {
  variant: 'default',
  mode: 'default'
};
Accordion.Item = _Accordion.default;
Accordion.displayName = 'Accordion';
var _default = Accordion;
exports.default = _default;