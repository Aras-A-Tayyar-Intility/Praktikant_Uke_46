"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CloseButton = _interopRequireDefault(require("../common/CloseButton.internal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Drawer = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      header = _ref.header,
      isOpen = _ref.isOpen,
      overlay = _ref.overlay,
      onRequestClose = _ref.onRequestClose,
      props = _objectWithoutProperties(_ref, ["children", "className", "header", "isOpen", "overlay", "onRequestClose"]);

  (0, _react.useEffect)(function () {
    if (typeof document === 'undefined') return;
    if (!isOpen) return;
    if (window.outerWidth >= 1280 && overlay !== true) return;
    if (overlay === false) return;

    function closeDrawerOnEsc(e) {
      if (e.key === 'Escape') {
        e.stopPropagation();
        onRequestClose();
      }
    }

    document.addEventListener('keydown', closeDrawerOnEsc);
    return function () {
      return document.removeEventListener('keydown', closeDrawerOnEsc);
    };
  }, [isOpen]); // Hiding body scrollbar when overlay is visible

  (0, _react.useEffect)(function () {
    if (typeof window === 'undefined') return;
    if (window.outerWidth >= 1280) return;

    if (isOpen) {
      document.body.style.overflowY = 'hidden';
    } else {
      document.body.style.overflowY = 'auto';
    }
  }, [isOpen]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('bf-drawer bf-scrollbar', className, {
      'bf-drawer-open': isOpen,
      'bf-overlay-visible': overlay === true
    }),
    "data-testid": "bf-drawer",
    ref: ref
  }, props), /*#__PURE__*/_react.default.createElement(_CloseButton.default, {
    onClick: onRequestClose
  }), header && /*#__PURE__*/_react.default.createElement("header", {
    className: "bf-drawer-header",
    "data-testid": "bf-drawer-header"
  }, header), children), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'bf-drawer-overlay': overlay !== false,
      'bf-drawer-open': isOpen,
      'bf-drawer-force-overlay': overlay === true
    }),
    onClick: function onClick(e) {
      e.stopPropagation();
      onRequestClose();
    }
  }));
});
Drawer.propTypes = {
  /** Content of the drawer */
  children: _propTypes.default.node,

  /** Open or closed state */
  isOpen: _propTypes.default.bool.isRequired,

  /** Function for closing the Drawer */
  onRequestClose: _propTypes.default.func.isRequired,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Drawer title */
  header: _propTypes.default.node,

  /** Force overlay on or off (default on for small screens) */
  overlay: _propTypes.default.bool
};
Drawer.displayName = 'Drawer';
var _default = Drawer;
exports.default = _default;