"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _types = require("../../../types");

var _Icon = _interopRequireDefault(require("../../Visual/Icon"));

var _Message = _interopRequireDefault(require("./Message.Header"));

var _assets = require("../../../assets");

var _useLocale = _interopRequireDefault(require("../../../hooks/useLocale"));

var _SlideDown = _interopRequireDefault(require("../../Utility/SlideDown"));

var _accessibleOnClick = _interopRequireDefault(require("../../../utils/accessibleOnClick"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Display a highlighted message
 */
var Message = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      header = _ref.header,
      state = _ref.state,
      icon = _ref.icon,
      noIcon = _ref.noIcon,
      statusBar = _ref.statusBar,
      noPadding = _ref.noPadding,
      onClose = _ref.onClose,
      expandable = _ref.expandable,
      autoScroll = _ref.autoScroll,
      isOpen = _ref.isOpen,
      onHeaderClick = _ref.onHeaderClick,
      props = _objectWithoutProperties(_ref, ["children", "className", "header", "state", "icon", "noIcon", "statusBar", "noPadding", "onClose", "expandable", "autoScroll", "isOpen", "onHeaderClick"]);

  var _useState = (0, _react.useState)(isOpen !== null && isOpen !== void 0 ? isOpen : false),
      _useState2 = _slicedToArray(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];

  var controlled = isOpen !== undefined && onHeaderClick !== undefined;
  var locale = (0, _useLocale.default)();

  var handleClick = function handleClick() {
    if (onHeaderClick) onHeaderClick();
    setActive(!active);
  };

  if (!icon && !noIcon) {
    icon = state === 'success' ? _assets.faCheckCircle : state === 'warning' ? _assets.faExclamationCircle : state === 'alert' ? _assets.faExclamationTriangle : _assets.faInfoCircle;
  }

  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('bf-message', className, {
      'bfc-theme-fade-bg': state === 'theme' && !statusBar,
      'bfc-success-fade-bg': state === 'success' && !statusBar,
      'bfc-warning-fade-bg': state === 'warning' && !statusBar,
      'bfc-alert-fade-bg': state === 'alert' && !statusBar,
      'bfc-dimmed-bg': state === 'neutral' && !statusBar,
      'bf-message-statusbar': statusBar,
      'bfc-theme-bg': state === 'theme' && statusBar,
      'bfc-success-bg': state === 'success' && statusBar,
      'bfc-warning-bg': state === 'warning' && statusBar,
      'bfc-alert-bg': state === 'alert' && statusBar,
      'bf-message-expandable': expandable || controlled,
      'bf-message-expandable-active': controlled ? isOpen : active
    }),
    ref: ref
  }, props, expandable || controlled ? (0, _accessibleOnClick.default)(props, function () {
    return handleClick();
  }) : {}), (expandable || controlled) && header && /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-message-expandable-icon"
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: _assets.faAngleDown
  })), onClose && /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    "aria-label": locale.closeMessage,
    className: "bf-message-close" // todo: make sure an expandable message can be closed with keyboard when
    // close button is focused (currently expands instead, while mouse clicks work)
    ,
    onClick: onClose
  }, /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: _assets.faTimes
  })), statusBar ? !noIcon && icon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
    icon: icon,
    fixedWidth: true,
    className: "bf-message-icon"
  }) : header && /*#__PURE__*/_react.default.createElement(_Message.default, {
    icon: icon
  }, header), !((expandable || controlled) && header) && /*#__PURE__*/_react.default.createElement("div", {
    className: "bf-message-content"
  }, children)), (expandable || controlled) && header && /*#__PURE__*/_react.default.createElement(_SlideDown.default, {
    contentClassName: (0, _classnames.default)('bf-message-expandable-content', {
      'bf-success': state === 'success',
      'bf-warning': state === 'warning',
      'bf-alert': state === 'alert',
      'bf-nopadding': noPadding
    }) // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    ,
    open: controlled ? isOpen : active,
    autoScroll: autoScroll,
    "data-testid": "bf-message-expandable-content"
  }, children));
});
Message.Header = _Message.default;
Message.propTypes = {
  /** Message text (or fragment) */
  children: _propTypes.default.node,

  /** CSS class name(s) */
  className: _propTypes.default.string,

  /** Message title, displayed with an icon */
  header: _propTypes.default.string,

  /** Available states: `theme` (default), `success`, `warning`, `alert` and `neutral` */
  state: _propTypes.default.oneOf(_types.StateArray),

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** Prevents default icon from being displayed */
  noIcon: _propTypes.default.bool,

  /** Attention-grabbing one-line message */
  statusBar: _propTypes.default.bool,

  /** Close button event handler, the close button is only rendered when this is supplied */
  onClose: _propTypes.default.func,

  /** If true places children inside dropdown, requires header to be present */
  expandable: _propTypes.default.bool,

  /** Removes padding from expandable content */
  noPadding: _propTypes.default.bool,

  /** Automatically scroll to view expanded content */
  autoScroll: _propTypes.default.bool,

  /** Boolean indicating if message is open or not */
  isOpen: _propTypes.default.bool,

  /** Function triggered when clicking on header */
  onHeaderClick: _propTypes.default.func
};
Message.defaultProps = {
  header: '',
  state: 'theme',
  className: '',
  statusBar: false
};
Message.displayName = 'Message';
var _default = Message;
exports.default = _default;