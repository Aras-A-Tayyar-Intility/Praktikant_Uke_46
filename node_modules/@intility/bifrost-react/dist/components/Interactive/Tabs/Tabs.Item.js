"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _useTabsContext2 = _interopRequireDefault(require("./hooks/useTabsContext"));

var _TabBar = _interopRequireDefault(require("../../Navigation/TabBar/TabBar.Item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * A single tab for `<Tabs>` container
 * @visibleName Tabs.Item
 */
var TabsItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var title = _ref.title,
      disabled = _ref.disabled,
      active = _ref.active,
      onClick = _ref.onClick,
      tabProps = _ref.tabProps;

  var _useTabsContext = (0, _useTabsContext2.default)(),
      onChange = _useTabsContext.onChange,
      activeItem = _useTabsContext.activeItem;

  var isActive = active !== null && active !== void 0 ? active : activeItem === title;

  var handleChange = function handleChange(e, key) {
    e.preventDefault();

    if (onClick) {
      onClick(e);
    } else if (onChange) {
      onChange(key);
    }
  };

  return /*#__PURE__*/_react.default.createElement("a", _extends({
    href: "#",
    role: "button",
    onClick: function onClick(e) {
      return handleChange(e, title);
    }
  }, disabled || isActive ? {} : {
    tabIndex: 0
  }, {
    ref: ref
  }, tabProps, {
    className: (0, _classnames.default)(tabProps === null || tabProps === void 0 ? void 0 : tabProps.className, {
      active: isActive
    }, {
      'bf-tab-disabled': disabled
    })
  }), /*#__PURE__*/_react.default.createElement(_TabBar.default, {
    icon: tabProps === null || tabProps === void 0 ? void 0 : tabProps.icon,
    disabled: disabled
  }, title));
});
TabsItem.propTypes = {
  /** Disabled tab */
  disabled: _propTypes.default.bool,

  /** Title of Tabs item. **Note:** it is important that this prop is unique */
  title: _propTypes.default.string.isRequired,

  /** Overrides default onClick on Tabs.Item */
  onClick: _propTypes.default.func,

  /** Bool to indicate when an item should be opened */
  active: _propTypes.default.bool,

  /** Props for the tab button element */
  tabProps: _propTypes.default.object,

  /** Bool to remove padding from content div */
  noPadding: _propTypes.default.bool
};
TabsItem.defaultProps = {
  disabled: false
};
TabsItem.displayName = 'Tabs.Item';
var _default = TabsItem;
exports.default = _default;