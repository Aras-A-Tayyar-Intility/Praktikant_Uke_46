"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useMediaQuery = function useMediaQuery(query) {
  //only instanciate one instance of mediaQueryList per query
  var mediaQueryList = (0, _react.useMemo)(function () {
    return typeof matchMedia === 'undefined' ? undefined : matchMedia(query);
  }, [query]);

  var _useState = (0, _react.useState)(mediaQueryList === null || mediaQueryList === void 0 ? void 0 : mediaQueryList.matches),
      _useState2 = _slicedToArray(_useState, 2),
      match = _useState2[0],
      setMatch = _useState2[1];

  (0, _react.useEffect)(function () {
    if (mediaQueryList !== undefined) {
      // does nothing if state already matches
      // still nessecary in case mediaListQuery changes due to query changing
      setMatch(mediaQueryList.matches);

      var listener = function listener(e) {
        return setMatch(e.matches);
      }; // should be using addEventListener
      // but apple is being a poop again
      // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility


      mediaQueryList.addListener(listener);
      return function () {
        return mediaQueryList.removeListener(listener);
      };
    }
  }, [mediaQueryList]);
  return match;
};

var _default = useMediaQuery;
exports.default = _default;