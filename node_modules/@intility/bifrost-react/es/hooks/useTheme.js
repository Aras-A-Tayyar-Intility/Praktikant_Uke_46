function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useContext, useEffect, useState } from 'react';
import { useIsomorphicLayoutEffect } from '..';
import useMediaQuery from './useMediaQuery';
var themes = ['dark', 'light', 'system'];
export var usePreferredColorScheme = function usePreferredColorScheme() {
  var systemDark = useMediaQuery('(prefers-color-scheme: dark)'); // ssr or no way of knowing, return default behaviour

  if (systemDark === undefined) {
    return 'system';
  }

  return systemDark ? 'dark' : 'light';
}; //#region localStorageTheme
// Used as a fallback for when Bifrost are not present in consumer application

var subscribers = []; //subscribe func that returns unsubscribe func, this fits well with useEffect

var subscribe = function subscribe(fn) {
  subscribers.push(fn);
  return function () {
    subscribers = subscribers.filter(function (s) {
      return s !== fn;
    });
  };
}; //notify func that calls all subscribers


var notify = function notify(theme) {
  return subscribers.forEach(function (fn) {
    return fn(theme);
  });
};

export var updateBodyClassList = function updateBodyClassList(theme) {
  //update body classes
  if (typeof document !== 'undefined') {
    document.body.classList.toggle('bf-lightmode', theme === 'light');
    document.body.classList.toggle('bf-darkmode', theme === 'dark');
  }
};

var updateTheme = function updateTheme(theme) {
  //update localStorage
  if (typeof window !== 'undefined' && window.localStorage) {
    localStorage.bfTheme = theme;
  }

  updateBodyClassList(theme); //update all hooks

  notify(theme);
}; //this subscribes with its setTheme function
//and exposes a toggle funciton that also notifies all other hooks


var useLocalStorageTheme = function useLocalStorageTheme(shouldModifyBody) {
  var startingTheme = typeof window !== 'undefined' && window.localStorage && themes.includes(localStorage.bfTheme) ? localStorage.bfTheme : 'system';

  var _useState = useState(startingTheme),
      _useState2 = _slicedToArray(_useState, 2),
      theme = _useState2[0],
      setTheme = _useState2[1];

  var preferred = usePreferredColorScheme();
  useEffect(function () {
    return subscribe(setTheme);
  }, []); // on load, set theme from localStorage

  useIsomorphicLayoutEffect(function () {
    if (shouldModifyBody) {
      updateBodyClassList(theme === 'system' ? preferred : theme);
    }
  }, [shouldModifyBody]); // Updates body class based on user preference if theme is set to system

  useIsomorphicLayoutEffect(function () {
    if (shouldModifyBody && theme === 'system') {
      updateBodyClassList(preferred);
    }
  }, [shouldModifyBody, theme, preferred]);
  return {
    theme: theme,
    setTheme: function setTheme(t) {
      updateTheme(t);
    },
    current: theme !== 'system' ? theme : preferred !== 'system' ? preferred : 'dark'
  };
}; //#endregion
//#region Context Theme
// Used when <Bifrost> wraps application


var ThemeContext = /*#__PURE__*/React.createContext(null);
ThemeContext.displayName = 'BifrostThemeContext';
export { ThemeContext }; //#endregion

var useTheme = function useTheme() {
  var themeContext = useContext(ThemeContext);
  var localStorageTheme = useLocalStorageTheme(!themeContext); // fall back to local storage when used without context

  return themeContext !== null && themeContext !== void 0 ? themeContext : localStorageTheme;
};

export default useTheme;