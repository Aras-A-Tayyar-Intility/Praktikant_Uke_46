function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faCircle } from '@fortawesome/free-regular-svg-icons';
import { faDotCircle } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';

/**
 * Application topbar item
 */
var TopBarItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      className = _ref.className,
      selectable = _ref.selectable,
      props = _objectWithoutProperties(_ref, ["children", "icon", "rightIcon", "className", "selectable"]);

  return /*#__PURE__*/React.createElement("div", _extends({
    "data-testid": "bf-topbar-item",
    className: classNames(className, {
      'bf-topbar-item': true,
      'bf-topbar-item-icon-right': rightIcon,
      'bf-topbar-item-icon-left': !rightIcon
    }),
    ref: ref
  }, props), icon && !rightIcon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    fixedWidth: true
  }), children && /*#__PURE__*/React.createElement("div", {
    "data-testid": "bf-topbar-item-children"
  }, children), icon && rightIcon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    fixedWidth: true
  }), selectable &&
  /*#__PURE__*/
  // correct icon is displayed through css, based on 'active' class on parent <a>
  React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Icon, {
    className: "bf-topbar-selected-icon",
    icon: faDotCircle,
    fixedWidth: true
  }), /*#__PURE__*/React.createElement(Icon, {
    className: "bf-topbar-unselected-icon",
    icon: faCircle,
    fixedWidth: true
  })));
});
TopBarItem.propTypes = {
  /** Content to show */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Icon position value. This will add space between content and icon based on the position */
  rightIcon: PropTypes.bool,

  /** Determines if an item can be selected. Note: This only works when TopBar.Item is a child of TopBar.Group */
  selectable: PropTypes.bool
};
TopBarItem.defaultProps = {
  rightIcon: false,
  selectable: false
};
TopBarItem.displayName = 'TopBar.Item';
export default TopBarItem;