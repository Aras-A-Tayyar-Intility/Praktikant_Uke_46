function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import { faAdjust } from '@fortawesome/free-solid-svg-icons';
import classNames from 'classnames';
import TopBarItem from './TopBar.Item';
import TopBarGroup from './TopBar.Group';
import Icon from '../../Visual/Icon';
import Logo from '../Sidebar/IntilityLogo.internal';
import useTheme from '../../../hooks/useTheme';

/**
 * @description deprecated
 * @deprecated since 2.2
 */
var TopBar = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var appName = _ref.appName,
      className = _ref.className,
      enableDarkModeToggle = _ref.enableDarkModeToggle,
      children = _ref.children,
      hideLogo = _ref.hideLogo,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["appName", "className", "enableDarkModeToggle", "children", "hideLogo", "logoHref", "logoOnClick"]);

  useEffect(function () {
    if (process.env.NODE_ENV === 'development') {
      console.warn('<TopBar> component is deprecated and will be removed in the next major release of Bifrost, use <Nav top={...}> or <Nav.Top> instead\n\n');
    }
  }, []);

  var _useTheme = useTheme(),
      theme = _useTheme.theme,
      setTheme = _useTheme.setTheme;

  return /*#__PURE__*/React.createElement("header", _extends({
    "data-testid": "bf-topbar",
    className: classNames(className, 'bf-topbar'),
    ref: ref
  }, props), !hideLogo && /*#__PURE__*/React.createElement("div", {
    className: "bf-intility-logo",
    "data-testid": "bf-intility-logo"
  }, /*#__PURE__*/React.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/React.createElement(Logo, null))), appName && /*#__PURE__*/React.createElement("div", {
    "data-testid": "bf-topbar-appname-container",
    className: "bf-topbar-appname-container"
  }, appName), /*#__PURE__*/React.createElement("div", {
    className: "bf-topbar-items-container",
    "data-testid": "bf-topbar-items-container"
  }, children, enableDarkModeToggle && /*#__PURE__*/React.createElement("a", {
    className: "bf-darkmode-toggle",
    href: "#",
    onClick: function onClick(e) {
      e.preventDefault();
      setTheme(theme === 'dark' ? 'light' : 'dark');
    },
    title: "Toggle dark mode"
  }, /*#__PURE__*/React.createElement(TopBarItem, null, /*#__PURE__*/React.createElement(Icon, {
    icon: faAdjust
  })))));
});
TopBar.Item = TopBarItem;
TopBar.Group = TopBarGroup;
TopBar.propTypes = {
  /** Application name, either a string or fragment */
  appName: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,

  /** Dark mode toggle button is included by default, set to `false` to hide */
  enableDarkModeToggle: PropTypes.bool,

  /** Element(s) shown on the right side of the bar */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Hides the Intility logo */
  hideLogo: PropTypes.bool,

  /** Custom url for clickable logo (default '/') */
  logoHref: PropTypes.string,

  /** Clickable logo event */
  logoOnClick: PropTypes.func
};
TopBar.defaultProps = {
  enableDarkModeToggle: true,
  children: null,
  hideLogo: false,
  logoHref: '/'
};
TopBar.displayName = 'TopBar';
TopBar.Item.displayName = 'TopBar.Item';
TopBar.Group.displayName = 'TopBar.Group';
export default TopBar;