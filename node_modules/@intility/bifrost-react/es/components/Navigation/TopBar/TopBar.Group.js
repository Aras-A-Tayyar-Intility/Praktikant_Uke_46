function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Tippy from '@tippyjs/react';
import { hideAll } from 'tippy.js';
import TopBarItem from './TopBar.Item';
var TopBarGroup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var name = _ref.name,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      selectable = _ref.selectable,
      props = _objectWithoutProperties(_ref, ["name", "children", "className", "style", "icon", "rightIcon", "selectable"]);

  var tippyRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      tippyVisible = _useState2[0],
      setTippyVisible = _useState2[1];

  var closePopup = function closePopup() {
    var _tippyRef$current, _focus, _ref2, _tippyRef$current2;

    (_tippyRef$current = tippyRef.current) === null || _tippyRef$current === void 0 ? void 0 : _tippyRef$current.hide();
    (_focus = (_ref2 = (_tippyRef$current2 = tippyRef.current) === null || _tippyRef$current2 === void 0 ? void 0 : _tippyRef$current2.reference).focus) === null || _focus === void 0 ? void 0 : _focus.call(_ref2);
  };

  var active = (Array.isArray(children) ? children : [children]).some(function (node) {
    var _node$props$className, _node$props$className2;

    return ((_node$props$className = (_node$props$className2 = node.props.className) === null || _node$props$className2 === void 0 ? void 0 : _node$props$className2.toLowerCase()) !== null && _node$props$className !== void 0 ? _node$props$className : '').includes('active');
  });

  var togglePopup = function togglePopup() {
    var _tippyRef$current3;

    if ((_tippyRef$current3 = tippyRef.current) !== null && _tippyRef$current3 !== void 0 && _tippyRef$current3.state.isShown) {
      closePopup();
    } else {
      var _tippyRef$current4;

      (_tippyRef$current4 = tippyRef.current) === null || _tippyRef$current4 === void 0 ? void 0 : _tippyRef$current4.show();
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "bf-topbar-group-container",
    className: classNames(className, 'bf-topbar-group-container'),
    style: style,
    ref: ref
  }, /*#__PURE__*/React.createElement(Tippy, {
    placement: "bottom-end",
    trigger: "mouseenter",
    arrow: true,
    onCreate: function onCreate(instance) {
      return tippyRef.current = instance;
    },
    interactive: true,
    offset: [0, 10],
    onShow: function onShow() {
      setTippyVisible(true);
      hideAll();
    },
    onHide: function onHide() {
      return setTippyVisible(false);
    },
    className: "bf-topbar-group",
    content: /*#__PURE__*/React.createElement("div", {
      onClick: closePopup
    }, children),
    popperOptions: {
      modifiers: [{
        name: 'arrow',
        options: {
          element: null
        }
      }]
    }
  }, /*#__PURE__*/React.createElement("a", {
    href: "#",
    className: active ? 'active' : '',
    onClick: function onClick(e) {
      e.preventDefault();
      togglePopup();
    },
    onKeyDown: function onKeyDown(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        togglePopup();
      }
    },
    role: "button"
  }, /*#__PURE__*/React.createElement(TopBarItem, _extends({}, props, {
    icon: icon,
    rightIcon: rightIcon,
    selectable: selectable,
    className: classNames({
      'bf-topbar-group-active': tippyVisible
    })
  }), name))));
});
TopBarGroup.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,
  //** @ignore */
  style: PropTypes.object,

  /** Element that opens TopBar.Group */
  name: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),

  /** Content that TopBar.Group will show when opened */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element.isRequired), PropTypes.element]).isRequired,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Icon position value. This will add space between content and icon based on the position */
  rightIcon: PropTypes.bool,

  /** Determines if an item can be selected. Note: This only works when TopBar.Item is a child of TopBar.Group */
  selectable: PropTypes.bool
};
export default TopBarGroup;