function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faCircle } from '@fortawesome/free-regular-svg-icons';
import { faDotCircle } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';
import useSidebarCollapsed from './hooks/useSidebarCollapsed';

/**
 * Clickable items for Sidebar
 * @visibleName Sidebar.Item
 */
var SidebarItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ["children", "icon", "rightIcon", "className"]);

  var collapsed = useSidebarCollapsed();
  return /*#__PURE__*/React.createElement("div", _extends({
    // todo: stringify react node content
    title: collapsed ? children === null || children === void 0 ? void 0 : children.toString() : undefined
  }, props, {
    className: classNames(className, 'bf-sidebar-item', {
      'bf-sidebar-item-with-icon': icon,
      'bf-sidebar-item-with-right-icon': rightIcon
    }),
    ref: ref
  }), icon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    fixedWidth: true,
    className: "bf-sidebar-item-icon"
  }), children, rightIcon ? /*#__PURE__*/React.createElement("span", {
    className: "bf-sidebar-item-righticon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: rightIcon,
    fixedWidth: true
  })) :
  /*#__PURE__*/
  // include sublink circle icon by default. hidden with css when not inside a group
  React.createElement("span", {
    className: "bf-sidebar-item-righticon bf-sidebar-group-item-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faCircle,
    fixedWidth: true,
    className: "bf-sidebar-group-item-icon-circle"
  }), /*#__PURE__*/React.createElement(Icon, {
    icon: faDotCircle,
    fixedWidth: true,
    className: "bf-sidebar-group-item-icon-dot-circle"
  })));
});
SidebarItem.propTypes = {
  /** Sidebar item content (if not a simple string, also supply text version as title) */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  rightIcon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string])
};
SidebarItem.displayName = 'Sidebar.Item';
export default SidebarItem;