function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState, useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { hideAll } from 'tippy.js';
import { faAngleUp } from '../../../assets/faAngleUp';
import { faAngleDown } from '../../../assets/faAngleDown';
import useSidebarCollapsed from './hooks/useSidebarCollapsed';
import SidebarItem from './Sidebar.Item';
import Tippy from '@tippyjs/react';
import SlideDown from '../../Utility/SlideDown';

/**
 * Group of clickable items for Sidebar
 * @visibleName Sidebar.Group
 */
var SidebarGroup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _tippyRef$current5;

  var className = _ref.className,
      style = _ref.style,
      children = _ref.children,
      name = _ref.name,
      icon = _ref.icon,
      props = _objectWithoutProperties(_ref, ["className", "style", "children", "name", "icon"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      tippyVisible = _useState4[0],
      setTippyVisible = _useState4[1];

  var collapsed = useSidebarCollapsed();
  var tippyRef = useRef();
  var active = (Array.isArray(children) ? children : [children]).some(function (node) {
    var _node$props$className, _node$props$className2;

    return ((_node$props$className = (_node$props$className2 = node.props.className) === null || _node$props$className2 === void 0 ? void 0 : _node$props$className2.toLowerCase()) !== null && _node$props$className !== void 0 ? _node$props$className : '').includes('active');
  });

  var closePopup = function closePopup() {
    var _tippyRef$current, _tippyRef$current$hid, _focus, _ref2, _tippyRef$current2;

    (_tippyRef$current = tippyRef.current) === null || _tippyRef$current === void 0 ? void 0 : (_tippyRef$current$hid = _tippyRef$current.hide) === null || _tippyRef$current$hid === void 0 ? void 0 : _tippyRef$current$hid.call(_tippyRef$current);
    (_focus = (_ref2 = (_tippyRef$current2 = tippyRef.current) === null || _tippyRef$current2 === void 0 ? void 0 : _tippyRef$current2.reference).focus) === null || _focus === void 0 ? void 0 : _focus.call(_ref2);
  };

  var togglePopup = function togglePopup() {
    var _tippyRef$current3;

    if ((_tippyRef$current3 = tippyRef.current) !== null && _tippyRef$current3 !== void 0 && _tippyRef$current3.state.isShown) {
      closePopup();
    } else {
      var _tippyRef$current4;

      (_tippyRef$current4 = tippyRef.current) === null || _tippyRef$current4 === void 0 ? void 0 : _tippyRef$current4.show();
    }
  }; // make sure popups gets closed when sidebar is not collapsed


  useEffect(function () {
    if (!collapsed) hideAll();
  }, [collapsed]);
  var handleClick = useCallback(function (e) {
    e.preventDefault();

    if (collapsed) {
      togglePopup();
    } else {
      setExpanded(function (x) {
        return !x;
      });
    }
  }, [setExpanded, collapsed]);
  var button = /*#__PURE__*/React.createElement("a", {
    href: "#",
    role: "button",
    className: classNames({
      'bf-sidebar-group-active': tippyVisible,
      active: active
    }),
    "aria-expanded": collapsed ? (_tippyRef$current5 = tippyRef.current) === null || _tippyRef$current5 === void 0 ? void 0 : _tippyRef$current5.state.isShown : expanded,
    onClick: handleClick
  }, /*#__PURE__*/React.createElement(SidebarItem, _extends({
    icon: icon
  }, props, {
    rightIcon: expanded ? faAngleUp : faAngleDown,
    title: ""
  }), name));
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(className, 'bf-sidebar-group'),
    style: style,
    ref: ref
  }, collapsed ? /*#__PURE__*/React.createElement(Tippy, {
    placement: "right-start",
    trigger: "mouseenter",
    onCreate: function onCreate(instance) {
      return tippyRef.current = instance;
    },
    interactive: true,
    offset: [0, 10],
    onShow: function onShow() {
      setTippyVisible(true);
      hideAll();
    },
    onHide: function onHide() {
      return setTippyVisible(false);
    },
    className: "bf-sidebar-group-popup",
    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "bf-sidebar-group-popup-title"
    }, name), children),
    popperOptions: {
      strategy: 'fixed'
    },
    aria: {
      expanded: 'auto'
    }
  }, button) : button, /*#__PURE__*/React.createElement(SlideDown, {
    contentClassName: "bf-sidebar-group-items",
    open: expanded && !collapsed
  }, children));
});
SidebarGroup.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /* @ignore */
  style: PropTypes.object,

  /* Sidebar group button text */
  name: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired,

  /* Sidebar group items */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element.isRequired), PropTypes.element]).isRequired,

  /** Highlight the group and expand on load (only set to true on a single group) */
  active: PropTypes.bool,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string])
};
SidebarGroup.displayName = 'Sidebar.Group';
export default SidebarGroup;