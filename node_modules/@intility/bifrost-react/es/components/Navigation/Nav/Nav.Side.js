function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons';
import IntilityLogo from '../Sidebar/IntilityLogo.internal';
import NavItem from './Nav.Item';
import NavLocationProvider from './NavLocationContext.internal';
import useLocale from '../../../hooks/useLocale';
import { useLocalStorage } from '../../..';
var collapsedAppNameMaxLength = 4;

function abbreviate(name) {
  var matches = name.match(/\b([A-Z])/gi);
  if (!matches) return name;
  return matches.join('').slice(0, collapsedAppNameMaxLength);
}
/**
 * Nav sidebar
 */


var NavSide = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _collapsedAppName;

  var children = _ref.children,
      appName = _ref.appName,
      className = _ref.className,
      hideCollapse = _ref.hideCollapse,
      collapsedProp = _ref.collapsed,
      onCollapsedChange = _ref.onCollapsedChange,
      collapsedAppName = _ref.collapsedAppName,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["children", "appName", "className", "hideCollapse", "collapsed", "onCollapsedChange", "collapsedAppName", "logoHref", "logoOnClick"]);

  var _useLocalStorage = useLocalStorage('bfNavSideCollapsed', false),
      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),
      collapsedState = _useLocalStorage2[0],
      setCollapsedState = _useLocalStorage2[1];

  var collapsed = collapsedProp !== null && collapsedProp !== void 0 ? collapsedProp : collapsedState;
  var setCollapsed = onCollapsedChange !== null && onCollapsedChange !== void 0 ? onCollapsedChange : setCollapsedState;
  var locale = useLocale();

  if (!collapsedAppName && typeof appName === 'string') {
    collapsedAppName = abbreviate(appName || '');
  }

  var collapseButtonLabel = collapsed ? locale.expand : locale.collapse;
  var isStandalone = !!appName;
  return /*#__PURE__*/React.createElement(NavLocationProvider, {
    where: "side",
    open: !collapsed
  }, /*#__PURE__*/React.createElement("nav", _extends({}, props, {
    className: classnames('bf-nav bf-nav-side', className, {
      'bf-nav-side-standalone': isStandalone,
      'bf-nav-side-collapsed': collapsed
    }),
    ref: ref
  }), /*#__PURE__*/React.createElement("div", {
    className: "bf-intility-logo"
  }, /*#__PURE__*/React.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/React.createElement(IntilityLogo, null))), /*#__PURE__*/React.createElement("div", {
    className: "bf-nav-side-content"
  }, isStandalone && /*#__PURE__*/React.createElement("div", {
    className: "bf-nav-side-appname"
  }, collapsed ? (_collapsedAppName = collapsedAppName) === null || _collapsedAppName === void 0 ? void 0 : _collapsedAppName.slice(0, collapsedAppNameMaxLength) : appName), children), /*#__PURE__*/React.createElement("div", {
    className: "bf-nav bf-nav-side-bottom"
  }, !hideCollapse && /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setCollapsed(!collapsed);
    },
    className: "bf-nav-side-collapse-button"
  }, /*#__PURE__*/React.createElement(NavItem, {
    icon: collapsed ? faAngleRight : faAngleLeft
  }, collapseButtonLabel)))));
});
NavSide.propTypes = {
  /** One or more `<Sidebar.Item>`s */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Application name (only use if no TopBar) */
  appName: PropTypes.node,

  /** Abbreviated application name (max 4 characters, only use if no TopBar and you dont like the auto-generated one) */
  collapsedAppName: PropTypes.string,

  /** Hide collapse button */
  hideCollapse: PropTypes.bool,

  /** Override sidebar collapsed state */
  collapsed: PropTypes.bool,

  /** Callback for when collapsed changes  */
  onCollapsedChange: PropTypes.func,

  /** Custom url for clickable logo (default '/') */
  logoHref: PropTypes.string,

  /** Clickable logo event */
  logoOnClick: PropTypes.func
};
NavSide.defaultProps = {
  logoHref: '/'
};
NavSide.displayName = 'Nav.Side';
export default NavSide;