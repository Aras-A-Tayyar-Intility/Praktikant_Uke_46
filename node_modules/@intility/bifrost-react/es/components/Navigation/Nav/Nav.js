function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';
import NavTop from './Nav.Top';
import NavSide from './Nav.Side';
import NavMobile from './Nav.Mobile';
import NavItem from './Nav.Item';
import NavGroup from './Nav.Group';
import NavHeader from './Nav.Header';
import NavSearch from './Nav.Search';
import NavProvider from './NavContext.internal';
import classNames from 'classnames';
import useBreakpoint from '../../Utility/Breakpoint/useBreakpoint';
import { useLocalStorage, useTheme } from '../../..';
import NavTheme from './Nav.Theme';

/**
 * Responsive component for Bifrost navigation menus
 */
var Nav = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _sideProps$collapsed, _sideProps$onCollapse;

  var children = _ref.children,
      appName = _ref.appName,
      top = _ref.top,
      topProps = _ref.topProps,
      side = _ref.side,
      sideProps = _ref.sideProps,
      mobile = _ref.mobile,
      mobileProps = _ref.mobileProps,
      hideCollapse = _ref.hideCollapse,
      collapsedAppName = _ref.collapsedAppName,
      hideTheme = _ref.hideTheme,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["children", "appName", "top", "topProps", "side", "sideProps", "mobile", "mobileProps", "hideCollapse", "collapsedAppName", "hideTheme", "logoHref", "logoOnClick"]);

  useTheme();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      mobileOpen = _useState2[0],
      setMobileOpen = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasToggledNavMobile = _useState4[0],
      setHasToggledNavMobile = _useState4[1];

  var isMobile = useBreakpoint(null, 'xl');
  useEffect(function () {
    if (typeof document === 'undefined') return;

    function closeMobileNavOnEsc(e) {
      if (e.key === 'Escape') setMobileOpen(false);
    }

    document.addEventListener('keydown', closeMobileNavOnEsc);
    return function () {
      return document.removeEventListener('keydown', closeMobileNavOnEsc);
    };
  }, [setMobileOpen]);

  var _useLocalStorage = useLocalStorage('bfNavCollapsed', false),
      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),
      collapsedState = _useLocalStorage2[0],
      setCollapsedState = _useLocalStorage2[1];

  var collapsed = (_sideProps$collapsed = sideProps === null || sideProps === void 0 ? void 0 : sideProps.collapsed) !== null && _sideProps$collapsed !== void 0 ? _sideProps$collapsed : collapsedState;
  var setCollapsed = (_sideProps$onCollapse = sideProps === null || sideProps === void 0 ? void 0 : sideProps.onCollapsedChange) !== null && _sideProps$onCollapse !== void 0 ? _sideProps$onCollapse : setCollapsedState; // Hiding body scrollbar when nav mobile is open

  useEffect(function () {
    if (typeof window === 'undefined') return;

    if (isMobile && mobileOpen && hasToggledNavMobile) {
      // document.body.style.overflowY = 'hidden'
      document.body.classList.add('bf-nav-mobile-open');
    } else {
      // document.body.style.overflowY = 'auto'
      document.body.classList.remove('bf-nav-mobile-open');
    }
  }, [isMobile, mobileOpen]); // only apply animations after the first time mobileOpen is set to true

  useEffect(function () {
    if (!mobileOpen) return;
    setHasToggledNavMobile(true);
  }, [mobileOpen]);
  return /*#__PURE__*/React.createElement(NavProvider, {
    sideCollapsed: collapsed,
    setSideCollapsed: setCollapsed,
    mobileOpen: mobileOpen,
    setMobileOpen: setMobileOpen
  }, side && /*#__PURE__*/React.createElement(NavSide, _extends({
    appName: top ? '' : appName,
    hideCollapse: hideCollapse,
    collapsedAppName: collapsedAppName,
    logoHref: logoHref,
    logoOnClick: logoOnClick
  }, sideProps, {
    collapsed: collapsed,
    onCollapsedChange: setCollapsed,
    className: classNames('from-xl', sideProps === null || sideProps === void 0 ? void 0 : sideProps.className)
  }), side, !top && !hideTheme && /*#__PURE__*/React.createElement(NavTheme, null)), /*#__PURE__*/React.createElement(NavTop, _extends({
    appName: appName,
    preLogo: (mobile || side) && /*#__PURE__*/React.createElement("button", {
      type: "button",
      className: "to-xl",
      onClick: function onClick(e) {
        setMobileOpen(!mobileOpen);
        e.stopPropagation();
      }
    }, /*#__PURE__*/React.createElement(NavItem, {
      icon: mobileOpen ? faTimes : faBars
    })),
    logoHref: logoHref,
    logoOnClick: logoOnClick,
    hideTheme: hideTheme
  }, topProps, {
    onClick: function onClick(e) {
      var _topProps$onClick;

      setMobileOpen(false);
      topProps === null || topProps === void 0 ? void 0 : (_topProps$onClick = topProps.onClick) === null || _topProps$onClick === void 0 ? void 0 : _topProps$onClick.call(topProps, e);
    },
    className: classNames(topProps === null || topProps === void 0 ? void 0 : topProps.className, {
      'to-xl': !top
    }),
    logoClassName: classNames(topProps === null || topProps === void 0 ? void 0 : topProps.logoClassName, {
      'to-xl': side
    })
  }), top), (mobile || side) && /*#__PURE__*/React.createElement(NavMobile, _extends({}, mobileProps, {
    onClick: function onClick(e) {
      var _mobileProps$onClick;

      // automatically close mobile nav on link clicks
      if (e.target.closest('a')) {
        setMobileOpen(false);
      }

      mobileProps === null || mobileProps === void 0 ? void 0 : (_mobileProps$onClick = mobileProps.onClick) === null || _mobileProps$onClick === void 0 ? void 0 : _mobileProps$onClick.call(mobileProps, e);
    },
    onOverlayClick: function onOverlayClick(e) {
      setMobileOpen(false);
      e.stopPropagation();
    },
    className: classNames(mobileProps === null || mobileProps === void 0 ? void 0 : mobileProps.className, // for standalone <Mobile.Nav>, display the component by default,
    // but we want to hide it when using <Nav>
    'to-xl bf-display-none bf-scrollbar', {
      // only apply animation after first toggle to
      // prevent animation onload (overrides bf-display-none)
      'bf-nav-mobile-open': mobileOpen && hasToggledNavMobile,
      'bf-nav-mobile-close': !mobileOpen && hasToggledNavMobile
    })
  }), mobile !== null && mobile !== void 0 ? mobile : side), /*#__PURE__*/React.createElement("main", _extends({
    ref: ref
  }, props), children));
});
Nav.Item = NavItem;
Nav.Group = NavGroup;
Nav.Side = NavSide;
Nav.Top = NavTop;
Nav.Mobile = NavMobile;
Nav.Header = NavHeader;
Nav.Search = NavSearch;
Nav.propTypes = {
  /** Your application content */
  children: PropTypes.node,

  /** Top nav content */
  top: PropTypes.node,

  /** Top bar props */
  topProps: PropTypes.object,

  /** Side nav content */
  side: PropTypes.node,

  /** Side nav props */
  sideProps: PropTypes.object,

  /** Mobile fullscreen nav content (optional, defaults to side content) */
  mobile: PropTypes.node,

  /** Mobile nav props */
  mobileProps: PropTypes.object,

  /** Application name (only use if no TopBar) */
  appName: PropTypes.node.isRequired,

  /** Abbreviated application name (max 4 characters, only use if no TopBar and you dont like the auto-generated one) */
  collapsedAppName: PropTypes.string,

  /** Hide collapse button */
  hideCollapse: PropTypes.bool,

  /** Hide the color scheme picker */
  hideTheme: PropTypes.bool,

  /** Custom url for clickable logo (default '/') */
  logoHref: PropTypes.string,

  /** Clickable logo event */
  logoOnClick: PropTypes.func
};
Nav.defaultProps = {
  logoHref: '/'
};
Nav.displayName = 'Nav';
export default Nav;