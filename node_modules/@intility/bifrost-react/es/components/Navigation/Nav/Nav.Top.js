function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import IntilityLogo from '../Sidebar/IntilityLogo.internal';
import NavLocationProvider from './NavLocationContext.internal';
import NavTheme from './Nav.Theme';

/**
 * Nav top bar
 */
var NavTop = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var appName = _ref.appName,
      children = _ref.children,
      className = _ref.className,
      preLogo = _ref.preLogo,
      hideTheme = _ref.hideTheme,
      logoClassName = _ref.logoClassName,
      logoHref = _ref.logoHref,
      logoOnClick = _ref.logoOnClick,
      props = _objectWithoutProperties(_ref, ["appName", "children", "className", "preLogo", "hideTheme", "logoClassName", "logoHref", "logoOnClick"]);

  return /*#__PURE__*/React.createElement(NavLocationProvider, {
    where: "top"
  }, /*#__PURE__*/React.createElement("header", _extends({}, props, {
    className: classnames('bf-nav bf-nav-top', className),
    ref: ref
  }), preLogo, /*#__PURE__*/React.createElement("div", {
    className: classnames('bf-intility-logo', logoClassName)
  }, /*#__PURE__*/React.createElement("a", {
    href: logoHref,
    onClick: logoOnClick
  }, /*#__PURE__*/React.createElement(IntilityLogo, null))), /*#__PURE__*/React.createElement("div", {
    className: "bf-nav-top-appname"
  }, /*#__PURE__*/React.createElement("span", {
    className: "from-small"
  }, appName)), /*#__PURE__*/React.createElement("div", {
    className: "bf-nav-top-content"
  }, children, !hideTheme && /*#__PURE__*/React.createElement(NavTheme, null))));
});
NavTop.propTypes = {
  /** Name of your application */
  appName: PropTypes.node.isRequired,

  /** Top bar content */
  children: PropTypes.node,

  /** Any content placed left of the logo (like a hamburger) */
  preLogo: PropTypes.node,

  /** Hide the color scheme picker dropdown */
  hideTheme: PropTypes.bool,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** CSS class name(s) for logo container */
  logoClassName: PropTypes.string,

  /** Custom url for clickable logo (default '/') */
  logoHref: PropTypes.string,

  /** Clickable logo event */
  logoOnClick: PropTypes.func
};
NavTop.defaultProps = {
  logoHref: '/'
};
NavTop.displayName = 'Nav.Top';
export default NavTop;