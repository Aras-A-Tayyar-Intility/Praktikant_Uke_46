function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faCircle } from '@fortawesome/free-regular-svg-icons';
import { faDotCircle } from '@fortawesome/free-solid-svg-icons';
import { Icon } from '../../..';

// used to determine if anything is gonna render
// falsy elements do not render,
// but child arrays are truthy even though their items are falsy
var hasTruthyChildren = function hasTruthyChildren(children) {
  if (Array.isArray(children)) {
    return children.some(hasTruthyChildren);
  }

  return !!children;
};
/**
 * Item for Nav component
 */


var NavItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      icon = _ref.icon,
      className = _ref.className,
      hideCircle = _ref.hideCircle,
      props = _objectWithoutProperties(_ref, ["children", "icon", "className", "hideCircle"]);

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: classNames('bf-nav-item', className, {
      'bf-nav-item-with-icon': icon,
      'bf-nav-item-icon-only': icon && !hasTruthyChildren(children)
    }),
    ref: ref
  }), icon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    fixedWidth: true,
    className: "bf-nav-item-icon"
  }), children, !hideCircle && /*#__PURE__*/React.createElement("span", {
    className: "bf-nav-group-item-circle-wrapper"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faCircle,
    fixedWidth: true,
    className: "bf-nav-group-item-circle"
  }), /*#__PURE__*/React.createElement(Icon, {
    icon: faDotCircle,
    fixedWidth: true,
    className: "bf-nav-group-item-dot-circle"
  })));
});
NavItem.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Nav item content */
  children: PropTypes.node,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /* Hide Nav.Group > item circle */
  hideCircle: PropTypes.bool
};
NavItem.displayName = 'Nav.Item';
export default NavItem;