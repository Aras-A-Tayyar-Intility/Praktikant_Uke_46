function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faSearch } from '@fortawesome/free-solid-svg-icons';
import NavGroup from './Nav.Group';
import NavItem from './Nav.Item';
import { useNav } from './NavContext.internal';
import { useNavLocation } from './NavLocationContext.internal';
import useLocale from '../../../hooks/useLocale';
import { Icon } from '../../..';
import { fadSpinnerThird } from '../../../assets';
// todo: for collapsed sidebar, focus input after expanding dropout

/**
 * A search input for use inside Nav, expandable in top bar or collapsible sidebar
 */
var NavSearch = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      _onSubmit = _ref.onSubmit,
      loading = _ref.loading,
      itemProps = _ref.itemProps,
      groupProps = _ref.groupProps,
      formProps = _ref.formProps,
      props = _objectWithoutProperties(_ref, ["className", "onSubmit", "loading", "itemProps", "groupProps", "formProps"]);

  var _useNav = useNav(),
      sideCollapsed = _useNav.sideCollapsed;

  var _useNavLocation = useNavLocation(),
      where = _useNavLocation.where;

  var locale = useLocale();
  var searchIcon = /*#__PURE__*/React.createElement(Icon, {
    icon: loading ? fadSpinnerThird : faSearch,
    spin: loading,
    className: classNames({
      'bf-input-loading-icon': loading
    }),
    fixedWidth: true
  });
  var input = /*#__PURE__*/React.createElement("form", _extends({
    noValidate: true,
    onSubmit: function onSubmit(e) {
      e.preventDefault();
      _onSubmit === null || _onSubmit === void 0 ? void 0 : _onSubmit(e);
    }
  }, formProps, {
    className: classNames(formProps === null || formProps === void 0 ? void 0 : formProps.className, 'bf-input-icon-container', 'bf-nav-search-input', 'bf-input-outline', {
      'bf-input-icon-left': !_onSubmit,
      'bf-input-icon-right': !!_onSubmit
    })
  }), /*#__PURE__*/React.createElement("input", _extends({
    placeholder: locale.search,
    "aria-label": locale.search
  }, props, {
    required: true // allows CSS to select based on value content using :valid
    ,
    className: "bf-input",
    ref: ref
  })), _onSubmit ? /*#__PURE__*/React.createElement("button", _extends({
    className: "bf-input-icon bf-input-icon-button",
    "aria-label": locale.search
  }, where === 'top' ? {
    tabIndex: -1
  } : {}), searchIcon) : /*#__PURE__*/React.createElement("span", {
    className: "bf-input-icon"
  }, searchIcon));

  if (where === 'side' && sideCollapsed) {
    return /*#__PURE__*/React.createElement(NavGroup, _extends({
      icon: faSearch
    }, groupProps, {
      className: classNames(groupProps === null || groupProps === void 0 ? void 0 : groupProps.className, className, 'bf-nav-search-group')
    }), input);
  }

  if (where === 'top') {
    return /*#__PURE__*/React.createElement(NavItem, _extends({}, itemProps, {
      className: classNames(itemProps === null || itemProps === void 0 ? void 0 : itemProps.className, className, 'bf-nav-search-item')
    }), input);
  }

  return /*#__PURE__*/React.createElement(NavItem, _extends({}, itemProps, {
    className: classNames(itemProps === null || itemProps === void 0 ? void 0 : itemProps.className, className, 'bf-nav-search-item')
  }), input);
});
NavSearch.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Optional onSubmit handler for icon click / enter */
  onSubmit: PropTypes.func,

  /** Display a loading spinner in the input */
  loading: PropTypes.bool,

  /** Forwarded props for internal Nav.Item */
  itemProps: PropTypes.object,

  /** Forwarded props for internal Nav.Group (when used inside collapsed sidebar) */
  groupProps: PropTypes.object,

  /** Forwarded props for internal form element */
  formProps: PropTypes.object
};
NavSearch.displayName = 'Nav.Search';
export default NavSearch;