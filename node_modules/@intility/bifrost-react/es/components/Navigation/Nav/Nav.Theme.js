function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { faAdjust } from '@fortawesome/free-solid-svg-icons';
import { Checkbox, useTheme } from '../../..';
import useLocale from '../../../hooks/useLocale';
import NavGroup from './Nav.Group';
import NavHeader from './Nav.Header';
import { useNavLocation } from './NavLocationContext.internal';
import useUniqueId from '../../../hooks/useUniqueId';

/**
 * A `<Nav.Group>` pre-filled with radio buttons to toggle change color theme between 'dark', 'light', and 'system'
 */
var NavTheme = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var props = _extends({}, _ref);

  var _useTheme = useTheme(),
      theme = _useTheme.theme,
      setTheme = _useTheme.setTheme;

  var _useNavLocation = useNavLocation(),
      where = _useNavLocation.where;

  var locale = useLocale();
  var uid = useUniqueId();
  return /*#__PURE__*/React.createElement(NavGroup, _extends({
    icon: faAdjust,
    name: where === 'top' ? '' : locale.colorTheme,
    title: where === 'top' ? locale.colorTheme : ''
  }, props, {
    ref: ref
  }), where === 'top' && /*#__PURE__*/React.createElement(NavHeader, null, locale.colorTheme), /*#__PURE__*/React.createElement(Checkbox, {
    type: "radio",
    label: locale.dark,
    name: uid,
    checked: theme === 'dark',
    onChange: function onChange() {
      return setTheme('dark');
    }
  }), /*#__PURE__*/React.createElement(Checkbox, {
    type: "radio",
    label: locale.light,
    name: uid,
    checked: theme === 'light',
    onChange: function onChange() {
      return setTheme('light');
    }
  }), /*#__PURE__*/React.createElement(Checkbox, {
    type: "radio",
    label: locale.system,
    name: uid,
    checked: theme === 'system',
    onChange: function onChange() {
      return setTheme('system');
    }
  }));
});
NavTheme.displayName = 'Nav.Theme';
export default NavTheme;