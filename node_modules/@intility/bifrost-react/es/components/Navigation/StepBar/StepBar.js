function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import StepBarItem from './StepBar.Item';

/**
 * StepBar is used to display steps in a wizard
 */
var StepBar = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      variant = _ref.variant,
      disableCollapse = _ref.disableCollapse,
      props = _objectWithoutProperties(_ref, ["className", "variant", "disableCollapse"]);

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: classNames(className, {
      'bf-stepbar': variant !== 'circle',
      'bf-stepbar-circle': variant === 'circle',
      'bf-stepbar-responsive': !disableCollapse
    })
  }, props));
});
StepBar.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Disable responsive mode (numbers only for small screens, not recommended) */
  disableCollapse: PropTypes.bool,

  /** Display variant, either 'basic' (default) or 'circle' */
  variant: PropTypes.oneOf(['basic', 'circle'])
};
StepBar.defaultProps = {
  variant: 'basic'
};
StepBar.Item = StepBarItem;
StepBar.displayName = 'StepBar';
export default StepBar;