function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Icon from '../../Visual/Icon';
import { faCheck } from '../../../assets';
var StepBarItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var active = _ref.active,
      children = _ref.children,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ["active", "children", "className"]);

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: classNames('bf-stepbar-item', className, {
      'bf-stepbar-item-active': active
    })
  }, props), /*#__PURE__*/React.createElement("span", {
    className: "bf-stepbar-content"
  }, children), /*#__PURE__*/React.createElement("span", {
    className: "bf-stepbar-counter"
  }), /*#__PURE__*/React.createElement("span", {
    className: "bf-stepbar-circle-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faCheck
  })));
});
StepBarItem.propTypes = {
  /** Content to show */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Highlight current step (only use if not wrapped in a link, otherwise use 'active' class on the link instead) */
  active: PropTypes.bool
};
StepBarItem.displayName = 'StepBar.Item';
export default StepBarItem;