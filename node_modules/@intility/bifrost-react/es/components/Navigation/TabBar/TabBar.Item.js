function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import Icon from '../../Visual/Icon';

/**
 * A single tab for `<TabBar>` container
 * @visibleName TabBar.Item
 */
var TabBarItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      disabled = _ref.disabled,
      active = _ref.active,
      icon = _ref.icon,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "disabled", "active", "icon", "children"]);

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref
  }, props, {
    className: classnames('bf-tab', className, {
      'bf-tab-active': active
    }, {
      'bf-tab-disabled': disabled
    })
  }), /*#__PURE__*/React.createElement("span", {
    className: "bf-tab-title",
    "data-testid": "bf-tab-title"
  }, children, icon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    className: classnames('bf-tab-icon'),
    "data-testid": "bf-tab-icon"
  })));
});
TabBarItem.propTypes = {
  /** CSS classname(s) */
  className: PropTypes.string,

  /** Disabled tab */
  disabled: PropTypes.bool,

  /** Indicator for the active tab */
  active: PropTypes.bool,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** TabBar.Item content */
  children: PropTypes.node
};
TabBarItem.displayName = 'TabBar.Item';
export default TabBarItem;