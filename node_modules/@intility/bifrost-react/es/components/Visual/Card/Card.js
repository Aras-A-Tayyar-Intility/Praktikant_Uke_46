function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CardImage from './Card.Image';
import CardLogo from './Card.Logo';
import CardTitle from './Card.Title';
import CardContent from './Card.Content';
import CardButton from './Card.Button';

/**
 * Box container for tiled content
 */
var Card = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      align = _ref.align,
      padding = _ref.padding,
      props = _objectWithoutProperties(_ref, ["children", "className", "align", "padding"]);

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: classnames('bf-card bfc-base-3-bg bf-break-word', className, {
      'bf-card-align-center': align === 'center',
      'bf-card-no-padding': padding === 'none',
      'bf-card-padding-m': padding === 'medium',
      'bf-card-padding-l': padding === 'large'
    }),
    ref: ref
  }), children);
});
Card.propTypes = {
  /** Card content components (optionally wrapped in a link) */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Text alignment, 'left' (default) or 'center' */
  align: PropTypes.oneOf(['left', 'center']),

  /** Child component paddin; 'none', 'small' (default), 'medium' or 'large' */
  padding: PropTypes.oneOf(['none', 'small', 'medium', 'large'])
};
Card.Image = CardImage;
Card.Logo = CardLogo;
Card.Title = CardTitle;
Card.Content = CardContent;
Card.Button = CardButton;
Card.displayName = 'Card';
export default Card;