function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faSpinnerThird } from '../../../assets/faSpinnerThird';
import Icon from '../Icon';
var Spinner = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var icon = _ref.icon,
      overlay = _ref.overlay,
      size = _ref.size,
      label = _ref.label,
      labelProps = _ref.labelProps,
      spin = _ref.spin,
      pulse = _ref.pulse,
      onOverlayClick = _ref.onOverlayClick,
      props = _objectWithoutProperties(_ref, ["icon", "overlay", "size", "label", "labelProps", "spin", "pulse", "onOverlayClick"]);

  var spinner = /*#__PURE__*/React.createElement("div", _extends({
    className: classNames('bf-spinner-container'),
    ref: ref
  }, props), /*#__PURE__*/React.createElement(Icon // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  , {
    icon: icon ? icon : faSpinnerThird,
    className: classNames('bf-spinner-color', {
      'bf-icon-spinner': !spin && !pulse
    }),
    style: {
      height: size + 'px',
      width: size + 'px'
    },
    spin: spin,
    pulse: pulse
  }), label && /*#__PURE__*/React.createElement("p", _extends({}, labelProps, {
    className: classNames('bf-spinner-label', labelProps === null || labelProps === void 0 ? void 0 : labelProps.className)
  }), label));
  return overlay ? /*#__PURE__*/React.createElement("div", {
    className: "bf-overlay",
    role: "dialog",
    onClick: onOverlayClick
  }, spinner) : spinner;
});
Spinner.propTypes = {
  /** Adds overlay and center the spinner */
  overlay: PropTypes.bool,

  /** Spinner width and height in px */
  size: PropTypes.number,

  /** Label beneath the spinner */
  label: PropTypes.string,

  /** Customize the label */
  labelProps: PropTypes.object,

  /** Click event handler for overlay */
  onOverlayClick: PropTypes.func,

  /** Sends in custom icon */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Sets static spin animation */
  spin: PropTypes.bool,

  /** Sets pulse animation */
  pulse: PropTypes.bool
};
Spinner.defaultProps = {
  size: 64
};
Spinner.displayName = 'Spinner';
export default Spinner;