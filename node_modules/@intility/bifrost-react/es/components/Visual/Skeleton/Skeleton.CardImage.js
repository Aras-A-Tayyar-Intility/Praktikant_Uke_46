function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import SkeletonRect from './Skeleton.Rect';
var SkeletonCardImage = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutProperties(_ref, ["className"]);

  return /*#__PURE__*/React.createElement(SkeletonRect, _extends({
    className: classnames(className, 'bf-card-image')
  }, props, {
    ref: ref
  }));
});
SkeletonCardImage.propTypes = {
  /** Width of element. If type is number, value is in px */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Height of element. If type is number, value is in px*/
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** CSS class name(s) */
  className: PropTypes.string
};
SkeletonCardImage.displayName = 'Skeleton.CardImage';
export default SkeletonCardImage;