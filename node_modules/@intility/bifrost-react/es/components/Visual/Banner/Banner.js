function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';

/**
 * Banner component
 */
var Banner = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      align = _ref.align,
      props = _objectWithoutProperties(_ref, ["className", "align"]);

  var isButton = props === null || props === void 0 ? void 0 : props.hasOwnProperty('onClick');
  var El = isButton ? 'button' : 'div';
  return /*#__PURE__*/React.createElement(El, _extends({
    className: classnames('bf-banner', className, {
      'bf-banner-button': isButton,
      'bf-banner-left': align === 'left'
    })
  }, props, {
    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
    //@ts-ignore(2323)
    ref: ref
  }));
});
Banner.displayName = 'Banner';
Banner.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Banner content */
  children: PropTypes.node,

  /** onClick handler. Will render Banner as button */
  onClick: PropTypes.func,

  /** Align banner left or right (default) */
  align: PropTypes.oneOf(['left', 'right'])
};
Banner.defaultProps = {
  align: 'right'
};
export default Banner;