function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { StateArray } from '../../../types';

/**
 * Non-clickable badge for very short messages (i.e. server status) - also see `<Tag>`
 */
var Badge = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      state = _ref.state,
      props = _objectWithoutProperties(_ref, ["children", "className", "state"]);

  return /*#__PURE__*/React.createElement("div", _extends({
    className: classnames('bf-badge', className, {
      'bfc-theme-fade-bg': state === 'theme',
      'bfc-success-fade-bg': state === 'success',
      'bfc-warning-fade-bg': state === 'warning',
      'bfc-alert-fade-bg': state === 'alert',
      'bfc-dimmed-bg': state === 'neutral'
    }),
    ref: ref
  }, props), children);
});
Badge.propTypes = {
  /** Text content */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Available states: `theme` (default), `success`, `warning`, `alert`, and `neutral` */
  state: PropTypes.oneOf(StateArray)
};
Badge.defaultProps = {
  state: 'theme'
};
Badge.displayName = 'Badge';
export default Badge;