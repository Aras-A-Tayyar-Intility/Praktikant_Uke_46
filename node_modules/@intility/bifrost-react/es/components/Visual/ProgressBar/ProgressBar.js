function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

function numberRangePropType(isRequired, lowest, largest, props, propName, componentName) {
  componentName = componentName || 'ANONYMOUS';
  var value = props[propName];

  if (isRequired && value === null) {
    throw new Error("".concat(componentName, ": missing required prop: '").concat(propName, "'"));
  }

  if (typeof value !== 'number') {
    throw new Error("".concat(componentName, ": expected a number for: '").concat(propName, "' but got ").concat(value));
  }

  if (value < lowest || value > largest) {
    throw new Error("".concat(componentName, " ").concat(propName, ": ").concat(value, " is not between ").concat(lowest, " and ").concat(largest));
  }

  return null;
}

var percentage = numberRangePropType.bind(null, false, 0, 100); //@ts-ignore

percentage.isRequired = numberRangePropType.bind(null, true, 0, 100);
/**
 * Display progress as percentage
 */

var ProgressBar = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      value = _ref.value,
      size = _ref.size,
      hideLabel = _ref.hideLabel,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["className", "value", "size", "hideLabel", "disabled"]);

  var cappedValue = Math.min(Math.max(0, value), 100);
  return /*#__PURE__*/React.createElement("div", _extends({
    title: hideLabel ? "".concat(value, "%") : '',
    "aria-label": hideLabel ? "".concat(value, "%") : '',
    ref: ref
  }, props, {
    className: classnames(className, 'bf-progressbar-wrapper')
  }), /*#__PURE__*/React.createElement("div", {
    className: classnames('bf-progressbar', {
      'bf-progressbar-small': size === 'small',
      'bf-progressbar-large': size === 'large',
      'bf-progressbar-disabled': disabled
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "bf-progressbar-progress",
    style: {
      width: "".concat(cappedValue, "%")
    }
  })), typeof value === 'number' && !hideLabel && /*#__PURE__*/React.createElement("span", {
    className: "bf-progressbar-label"
  }, value, "%"));
});
ProgressBar.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Current progress as percentage number (0-100) */
  //@ts-ignore
  value: percentage.isRequired,

  /** Available sizes: large, regular (default), and small */
  size: PropTypes.oneOf(['large', 'regular', 'small']),

  /** Hide percentage label, will add label prop as aria-label for screen readers */
  hideLabel: PropTypes.bool,

  /** Disable the control */
  disabled: PropTypes.bool
};
ProgressBar.defaultProps = {
  className: '',
  size: 'regular',
  hideLabel: false,
  disabled: false
};
ProgressBar.displayName = 'ProgressBar';
export default ProgressBar;