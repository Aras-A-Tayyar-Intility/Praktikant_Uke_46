function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

/**
 * Responsive CSS Grid layout container, renders its children as columns based on a column width (300px columns by default)
 */
var AutoCol = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _objectSpread2;

  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      gap = _ref.gap,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, ["children", "className", "style", "gap", "width"]);

  var styles = _objectSpread(_objectSpread({}, style), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, '--bfl-autocol-gap', typeof gap === 'number' ? gap + 'px' : typeof gap === 'string' ? gap : undefined), _defineProperty(_objectSpread2, '--bfl-autocol-width', typeof width === 'number' ? width + 'px' : typeof width === 'string' ? width : undefined), _objectSpread2));

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: classNames('bfl-autocol', className),
    style: styles
  }), children);
});
AutoCol.propTypes = {
  /** Zero or more grid items (can be any element) */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Inline CSS styles */
  style: PropTypes.object,

  /** Gap css string, or number in px (12px default) */
  gap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Column width number in px (300px default) or a css length string */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
AutoCol.displayName = 'AutoCol';
export default AutoCol;