function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { ThemeContext, usePreferredColorScheme, updateBodyClassList } from '../../../hooks/useTheme';
import { LocaleContext } from '../../../hooks/useLocale';
import { useLocalStorage, enUS, useIsomorphicLayoutEffect } from '../../..';

/**
 * Configure Bifrost globally by wrapping this component around your app
 */
var Bifrost = function Bifrost(_ref) {
  var children = _ref.children,
      themeProp = _ref.theme,
      onThemeChange = _ref.onThemeChange,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? enUS : _ref$locale;

  var _useLocalStorage = useLocalStorage('bfTheme', themeProp !== null && themeProp !== void 0 ? themeProp : 'system'),
      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),
      themeState = _useLocalStorage2[0],
      setTheme = _useLocalStorage2[1];

  var preferred = usePreferredColorScheme();
  var theme = themeProp !== null && themeProp !== void 0 ? themeProp : themeState;
  var handleThemeChange = onThemeChange !== null && onThemeChange !== void 0 ? onThemeChange : setTheme;
  var currentTheme = theme !== 'system' ? theme : preferred !== 'system' ? preferred : 'dark'; // apply css classes to body so CSS vars are available globally (body scrollbar, tippy popups)

  useIsomorphicLayoutEffect(function () {
    updateBodyClassList(currentTheme);
  }, [currentTheme]);
  return /*#__PURE__*/React.createElement(LocaleContext.Provider, {
    value: locale
  }, /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: {
      theme: theme,
      setTheme: handleThemeChange,
      current: currentTheme
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('bf-options', {
      'bf-darkmode': (theme === 'system' ? preferred : theme) === 'dark',
      'bf-lightmode': (theme === 'system' ? preferred : theme) === 'light'
    })
  }, children)));
};

Bifrost.propTypes = {
  /** Your entire app (or at least the parts using bifrost components) */
  children: PropTypes.node,

  /** Current Bifrost theme: 'dark', 'light', or 'system' (default) */
  theme: PropTypes.oneOf(['dark', 'light', 'system']),

  /** Callback for theme changes */
  onThemeChange: PropTypes.func,

  /** Set current locale for all descendant Bifrost components */
  locale: PropTypes.object
};
export default Bifrost;