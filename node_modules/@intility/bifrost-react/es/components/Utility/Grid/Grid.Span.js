function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

/**
 * Grid child component for spanning multiple columns
 */
var GridSpan = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _objectSpread2;

  var cols = _ref.cols,
      small = _ref.small,
      medium = _ref.medium,
      large = _ref.large,
      xl = _ref.xl,
      xxl = _ref.xxl,
      style = _ref.style,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["cols", "small", "medium", "large", "xl", "xxl", "style", "className", "children"]);

  var styles = _objectSpread(_objectSpread({}, style), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, '--bf-grid-span', cols), _defineProperty(_objectSpread2, '--bf-grid-span-s', small !== null && small !== void 0 ? small : cols), _defineProperty(_objectSpread2, '--bf-grid-span-m', (_ref2 = medium !== null && medium !== void 0 ? medium : small) !== null && _ref2 !== void 0 ? _ref2 : cols), _defineProperty(_objectSpread2, '--bf-grid-span-l', (_ref3 = (_ref4 = large !== null && large !== void 0 ? large : medium) !== null && _ref4 !== void 0 ? _ref4 : small) !== null && _ref3 !== void 0 ? _ref3 : cols), _defineProperty(_objectSpread2, '--bf-grid-span-xl', (_ref5 = (_ref6 = (_ref7 = xl !== null && xl !== void 0 ? xl : large) !== null && _ref7 !== void 0 ? _ref7 : medium) !== null && _ref6 !== void 0 ? _ref6 : small) !== null && _ref5 !== void 0 ? _ref5 : cols), _defineProperty(_objectSpread2, '--bf-grid-span-xxl', (_ref8 = (_ref9 = (_ref10 = (_ref11 = xxl !== null && xxl !== void 0 ? xxl : xl) !== null && _ref11 !== void 0 ? _ref11 : large) !== null && _ref10 !== void 0 ? _ref10 : medium) !== null && _ref9 !== void 0 ? _ref9 : small) !== null && _ref8 !== void 0 ? _ref8 : cols), _objectSpread2));

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: classNames('bf-grid-span', className),
    style: styles,
    ref: ref
  }), children);
});
GridSpan.propTypes = {
  /** Content */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Inline CSS styles */
  style: PropTypes.object,

  /** Columns to span */
  cols: PropTypes.number,

  /** Columns to span for 600px and wider */
  small: PropTypes.number,

  /** Columns to span for 960px and wider */
  medium: PropTypes.number,

  /** Columns to span for 1280px and wider */
  large: PropTypes.number,

  /** Columns to span for 1600px and wider */
  xl: PropTypes.number,

  /** Columns to span for 1920px and wider */
  xxl: PropTypes.number
};
GridSpan.displayName = 'Grid.Span';
export default GridSpan;