function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import CloseButton from '../common/CloseButton.internal';
var Drawer = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      header = _ref.header,
      isOpen = _ref.isOpen,
      overlay = _ref.overlay,
      onRequestClose = _ref.onRequestClose,
      props = _objectWithoutProperties(_ref, ["children", "className", "header", "isOpen", "overlay", "onRequestClose"]);

  useEffect(function () {
    if (typeof document === 'undefined') return;
    if (!isOpen) return;
    if (window.outerWidth >= 1280 && overlay !== true) return;
    if (overlay === false) return;

    function closeDrawerOnEsc(e) {
      if (e.key === 'Escape') {
        e.stopPropagation();
        onRequestClose();
      }
    }

    document.addEventListener('keydown', closeDrawerOnEsc);
    return function () {
      return document.removeEventListener('keydown', closeDrawerOnEsc);
    };
  }, [isOpen]); // Hiding body scrollbar when overlay is visible

  useEffect(function () {
    if (typeof window === 'undefined') return;
    if (window.outerWidth >= 1280) return;

    if (isOpen) {
      document.body.style.overflowY = 'hidden';
    } else {
      document.body.style.overflowY = 'auto';
    }
  }, [isOpen]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", _extends({
    className: classNames('bf-drawer bf-scrollbar', className, {
      'bf-drawer-open': isOpen,
      'bf-overlay-visible': overlay === true
    }),
    "data-testid": "bf-drawer",
    ref: ref
  }, props), /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onRequestClose
  }), header && /*#__PURE__*/React.createElement("header", {
    className: "bf-drawer-header",
    "data-testid": "bf-drawer-header"
  }, header), children), /*#__PURE__*/React.createElement("div", {
    className: classNames({
      'bf-drawer-overlay': overlay !== false,
      'bf-drawer-open': isOpen,
      'bf-drawer-force-overlay': overlay === true
    }),
    onClick: function onClick(e) {
      e.stopPropagation();
      onRequestClose();
    }
  }));
});
Drawer.propTypes = {
  /** Content of the drawer */
  children: PropTypes.node,

  /** Open or closed state */
  isOpen: PropTypes.bool.isRequired,

  /** Function for closing the Drawer */
  onRequestClose: PropTypes.func.isRequired,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Drawer title */
  header: PropTypes.node,

  /** Force overlay on or off (default on for small screens) */
  overlay: PropTypes.bool
};
Drawer.displayName = 'Drawer';
export default Drawer;