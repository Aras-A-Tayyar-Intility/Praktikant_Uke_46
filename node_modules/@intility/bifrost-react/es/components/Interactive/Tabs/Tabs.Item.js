function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import useTabsContext from './hooks/useTabsContext';
import TabBarItem from '../../Navigation/TabBar/TabBar.Item';

/**
 * A single tab for `<Tabs>` container
 * @visibleName Tabs.Item
 */
var TabsItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var title = _ref.title,
      disabled = _ref.disabled,
      active = _ref.active,
      onClick = _ref.onClick,
      tabProps = _ref.tabProps;

  var _useTabsContext = useTabsContext(),
      onChange = _useTabsContext.onChange,
      activeItem = _useTabsContext.activeItem;

  var isActive = active !== null && active !== void 0 ? active : activeItem === title;

  var handleChange = function handleChange(e, key) {
    e.preventDefault();

    if (onClick) {
      onClick(e);
    } else if (onChange) {
      onChange(key);
    }
  };

  return /*#__PURE__*/React.createElement("a", _extends({
    href: "#",
    role: "button",
    onClick: function onClick(e) {
      return handleChange(e, title);
    }
  }, disabled || isActive ? {} : {
    tabIndex: 0
  }, {
    ref: ref
  }, tabProps, {
    className: classnames(tabProps === null || tabProps === void 0 ? void 0 : tabProps.className, {
      active: isActive
    }, {
      'bf-tab-disabled': disabled
    })
  }), /*#__PURE__*/React.createElement(TabBarItem, {
    icon: tabProps === null || tabProps === void 0 ? void 0 : tabProps.icon,
    disabled: disabled
  }, title));
});
TabsItem.propTypes = {
  /** Disabled tab */
  disabled: PropTypes.bool,

  /** Title of Tabs item. **Note:** it is important that this prop is unique */
  title: PropTypes.string.isRequired,

  /** Overrides default onClick on Tabs.Item */
  onClick: PropTypes.func,

  /** Bool to indicate when an item should be opened */
  active: PropTypes.bool,

  /** Props for the tab button element */
  tabProps: PropTypes.object,

  /** Bool to remove padding from content div */
  noPadding: PropTypes.bool
};
TabsItem.defaultProps = {
  disabled: false
};
TabsItem.displayName = 'Tabs.Item';
export default TabsItem;