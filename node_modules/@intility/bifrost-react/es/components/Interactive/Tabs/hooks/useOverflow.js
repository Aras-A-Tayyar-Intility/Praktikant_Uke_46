function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useState, useEffect } from 'react';
import useWindowSize from './useWindowSize';

function useOverflow(ref) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      refOverflow = _useState2[0],
      setRefOverflow = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      refScrollBegin = _useState4[0],
      setRefScrollBegin = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      refScrollEnd = _useState6[0],
      setRefScrollEnd = _useState6[1];

  var size = useWindowSize();
  useEffect(function () {
    if (!(ref !== null && ref !== void 0 && ref.current)) {
      return;
    }

    var isXOverflowing = ref.current.scrollWidth > ref.current.clientWidth;

    if (refOverflow !== isXOverflowing) {
      setRefOverflow(isXOverflowing);
    }

    var handleScroll = function handleScroll() {
      var _ref$current, _ref$current2, _ref$current3, _ref$current4;

      // Handle X Overflow
      var offsetRight = ref.current && (ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.scrollWidth) - (ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.clientWidth);

      if (offsetRight && ref.current && Math.ceil(ref === null || ref === void 0 ? void 0 : (_ref$current3 = ref.current) === null || _ref$current3 === void 0 ? void 0 : _ref$current3.scrollLeft) >= offsetRight && refScrollEnd === false) {
        setRefScrollEnd(true);
      } else {
        setRefScrollEnd(false);
      }

      if ((ref === null || ref === void 0 ? void 0 : (_ref$current4 = ref.current) === null || _ref$current4 === void 0 ? void 0 : _ref$current4.scrollLeft) === 0) {
        setRefScrollBegin(true);
      } else {
        setRefScrollBegin(false);
      }
    };

    ref.current.addEventListener('scroll', handleScroll);
    return function () {
      var _ref$current5;

      return (_ref$current5 = ref.current) === null || _ref$current5 === void 0 ? void 0 : _ref$current5.removeEventListener('scroll', handleScroll);
    };
  }, [ref, size.width]);
  return {
    refOverflow: refOverflow,
    refScrollBegin: refScrollBegin,
    refScrollEnd: refScrollEnd
  };
}

export default useOverflow;