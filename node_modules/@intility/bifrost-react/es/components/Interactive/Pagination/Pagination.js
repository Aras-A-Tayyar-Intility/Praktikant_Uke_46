function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import Icon from '../../Visual/Icon';
import { faAngleLeft, faAngleRight, faAngleDoubleLeft, faAngleDoubleRight } from '../../../assets';
import useLocale from '../../../hooks/useLocale';

/**
 * Component for displaying available pages and current page in a paged environment
 */
var Pagination = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      currentPage = _ref.currentPage,
      totalPages = _ref.totalPages,
      _ref$displayPages = _ref.displayPages,
      displayPages = _ref$displayPages === void 0 ? 9 : _ref$displayPages,
      onChange = _ref.onChange,
      props = _objectWithoutProperties(_ref, ["className", "currentPage", "totalPages", "displayPages", "onChange"]);

  var locale = useLocale();
  var displayPagesCapForMediumScreens = Math.min(displayPages, 9);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: classnames(className, 'bf-pagination'),
    ref: ref,
    "data-testid": "bf-pagination"
  }, props), currentPage > 1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    "aria-label": "".concat(locale.goTo, " ").concat(locale.first, " ").concat(locale.page),
    type: "button",
    className: "bf-pagination-button bf-pagination-button-arrow to-small",
    onClick: function onClick() {
      return onChange(1);
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleDoubleLeft
  })), /*#__PURE__*/React.createElement("button", {
    "aria-label": "".concat(locale.goTo, " ").concat(locale.previous, " ").concat(locale.page),
    className: "bf-title-link bf-pagination-prev",
    onClick: function onClick() {
      return onChange(currentPage - 1);
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleLeft
  }), locale.prev)), /*#__PURE__*/React.createElement("span", {
    className: "to-small"
  }, "".concat(currentPage, " of ").concat(totalPages)), /*#__PURE__*/React.createElement("span", {
    className: "from-small to-medium"
  }, totalPages > displayPagesCapForMediumScreens ? /*#__PURE__*/React.createElement(ComplexPagination, {
    currentPage: currentPage,
    onChange: onChange,
    displayPages: displayPagesCapForMediumScreens,
    totalPages: totalPages
  }) : /*#__PURE__*/React.createElement(BasicPagination, {
    currentPage: currentPage,
    onChange: onChange,
    totalPages: totalPages
  })), /*#__PURE__*/React.createElement("span", {
    className: "from-medium"
  }, totalPages > displayPages ? /*#__PURE__*/React.createElement(ComplexPagination, {
    currentPage: currentPage,
    onChange: onChange,
    displayPages: displayPages,
    totalPages: totalPages
  }) : /*#__PURE__*/React.createElement(BasicPagination, {
    currentPage: currentPage,
    onChange: onChange,
    totalPages: totalPages
  })), currentPage < totalPages && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    "aria-label": "".concat(locale.goTo, " ").concat(locale.next, " ").concat(locale.page),
    className: "bf-title-link bf-pagination-next",
    onClick: function onClick() {
      return onChange(currentPage + 1);
    }
  }, locale.next, /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleRight
  })), /*#__PURE__*/React.createElement("button", {
    "aria-label": "".concat(locale.goTo, " ").concat(locale.last, " ").concat(locale.page),
    type: "button",
    className: "bf-pagination-button bf-pagination-button-arrow to-small",
    onClick: function onClick() {
      return onChange(totalPages);
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleDoubleRight
  }))));
});
Pagination.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Current page */
  currentPage: PropTypes.number.isRequired,

  /** Total number of pages */
  totalPages: PropTypes.number.isRequired,

  /** Callback for page change. Calls the function with the page number */
  onChange: PropTypes.func.isRequired,

  /** Total number of displayed pages (includes '...'), should be odd and 7 or higher */
  displayPages: PropTypes.number
};
Pagination.defaultProps = {
  displayPages: 9
}; // INTERNAL PageButton

var PageButton = function PageButton(_ref2) {
  var page = _ref2.page,
      currentPage = _ref2.currentPage,
      onChange = _ref2.onChange;
  var locale = useLocale();
  return /*#__PURE__*/React.createElement("button", {
    "aria-label": "".concat(locale.goTo, " ").concat(locale.page, " ").concat(page),
    type: "button",
    disabled: page === currentPage,
    className: classnames('bf-pagination-button', {
      'bf-pagination-button-selected': page === currentPage
    }),
    onClick: function onClick() {
      return onChange(page);
    }
  }, page);
};

PageButton.propTypes = {
  page: PropTypes.number.isRequired,
  currentPage: PropTypes.number.isRequired,
  onChange: PropTypes.func.isRequired
}; // INTERNAL BasicPagination

var BasicPagination = function BasicPagination(_ref3) {
  var currentPage = _ref3.currentPage,
      totalPages = _ref3.totalPages,
      onChange = _ref3.onChange,
      _ref3$offset = _ref3.offset,
      offset = _ref3$offset === void 0 ? 1 : _ref3$offset;
  return /*#__PURE__*/React.createElement(React.Fragment, null, Array(totalPages).fill(null).map(function (_, i) {
    return /*#__PURE__*/React.createElement(PageButton, {
      key: i + offset,
      page: i + offset,
      currentPage: currentPage,
      onChange: onChange
    });
  }));
};

BasicPagination.propTypes = {
  currentPage: PropTypes.number.isRequired,
  totalPages: PropTypes.number.isRequired,
  onChange: PropTypes.func.isRequired,
  offset: PropTypes.number
};
BasicPagination.defaultProps = {
  offset: 1
}; // INTERNAL ComplexPagination

var ComplexPagination = function ComplexPagination(_ref4) {
  var currentPage = _ref4.currentPage,
      totalPages = _ref4.totalPages,
      _ref4$displayPages = _ref4.displayPages,
      dp = _ref4$displayPages === void 0 ? 9 : _ref4$displayPages,
      onChange = _ref4.onChange;
  var displayPages = Math.max(7, dp % 2 === 0 ? dp + 1 : dp);
  var dynamicPages = displayPages - 4;
  var dynamicOffset = Math.min(Math.max(currentPage - (displayPages - 5) / 2, 3), totalPages - 1 - dynamicPages);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageButton, {
    page: 1,
    currentPage: currentPage,
    onChange: onChange
  }), currentPage <= Math.ceil(displayPages / 2) ? /*#__PURE__*/React.createElement(PageButton, {
    page: 2,
    currentPage: currentPage,
    onChange: onChange
  }) : /*#__PURE__*/React.createElement("span", {
    className: "bf-pagination-dots"
  }, "..."), /*#__PURE__*/React.createElement(BasicPagination, {
    totalPages: dynamicPages,
    currentPage: currentPage,
    offset: dynamicOffset,
    onChange: onChange
  }), currentPage >= totalPages - Math.floor(displayPages / 2) ? /*#__PURE__*/React.createElement(PageButton, {
    page: totalPages - 1,
    currentPage: currentPage,
    onChange: onChange
  }) : /*#__PURE__*/React.createElement("span", {
    className: "bf-pagination-dots"
  }, "..."), /*#__PURE__*/React.createElement(PageButton, {
    page: totalPages,
    currentPage: currentPage,
    onChange: onChange
  }));
};

ComplexPagination.propTypes = {
  currentPage: PropTypes.number.isRequired,
  totalPages: PropTypes.number.isRequired,
  onChange: PropTypes.func.isRequired,
  displayPages: PropTypes.number.isRequired
};
Pagination.displayName = 'Pagination';
export default Pagination;