function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

/**
 * Clickable Tag - also see `<Badge>`
 */
var Tag = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      onClick = _ref.onClick,
      active = _ref.active,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["children", "className", "onClick", "active", "variant"]);

  return /*#__PURE__*/React.createElement("button", _extends({
    type: "button"
  }, props, {
    ref: ref,
    className: classnames('bf-tag', 'bf-button', className, {
      'bf-tag-compact': variant === 'compact',
      'bf-button-filled': active
    }),
    onClick: onClick
  }), children);
});
Tag.propTypes = {
  /** Tag text */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Disable the button */
  disabled: PropTypes.bool,

  /** Click handler */
  onClick: PropTypes.func.isRequired,

  /** Indicate selected tag */
  active: PropTypes.bool,

  /** Set different style with variant */
  variant: PropTypes.oneOf(['basic', 'compact'])
};
Tag.defaultProps = {
  disabled: false,
  active: false,
  variant: 'basic'
};
Tag.displayName = 'Tag';
export default Tag;