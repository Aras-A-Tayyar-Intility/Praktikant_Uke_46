function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import ReactModal from 'react-modal';
import Icon from '../../Visual/Icon';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { faTimes } from '../../../assets/faTimes';
import ModalFooter from './Modal.Footer';
import Banner from '../../Visual/Banner';
import useTheme from '../../../hooks/useTheme';
import CloseButton from '../common/CloseButton.internal';

/**
 * Show a Modal
 */
var Modal = function Modal(_ref) {
  var isOpen = _ref.isOpen,
      className = _ref.className,
      overlayClassName = _ref.overlayClassName,
      onRequestClose = _ref.onRequestClose,
      aria = _ref.aria,
      children = _ref.children,
      header = _ref.header,
      icon = _ref.icon,
      headerChildren = _ref.headerChildren,
      contentLabel = _ref.contentLabel,
      noPadding = _ref.noPadding,
      noHeader = _ref.noHeader,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["isOpen", "className", "overlayClassName", "onRequestClose", "aria", "children", "header", "icon", "headerChildren", "contentLabel", "noPadding", "noHeader", "style"]);

  var _useTheme = useTheme(),
      current = _useTheme.current;

  return /*#__PURE__*/React.createElement(ReactModal, _extends({
    isOpen: isOpen,
    className: "bf-modal bf-scrollbar",
    overlayClassName: classnames("bf-".concat(current, "mode"), overlayClassName, 'bf-modal-wrapper'),
    onRequestClose: onRequestClose,
    contentLabel: noHeader ? header : contentLabel,
    style: style && {
      overlay: style.overlay
    },
    aria: contentLabel || noHeader ? aria : _objectSpread({
      labelledby: 'bf-modal-heading'
    }, aria)
  }, props), onRequestClose && /*#__PURE__*/React.createElement(Banner, {
    className: "bf-modal-close-button",
    onClick: onRequestClose
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faTimes,
    fixedWidth: true
  })), /*#__PURE__*/React.createElement("div", {
    style: style && style.content,
    className: classnames(className, 'bf-modal-content bf-scrollbar', {
      'bf-no-padding': noPadding
    })
  }, onRequestClose && /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onRequestClose
  }), !noHeader && /*#__PURE__*/React.createElement("header", {
    className: "bf-modal-header"
  }, /*#__PURE__*/React.createElement("h1", {
    id: "bf-modal-heading",
    className: "bf-modal-header-h1"
  }, icon && /*#__PURE__*/React.createElement(Icon, {
    className: "bf-modal-header-icon",
    icon: icon
  }), header), headerChildren), /*#__PURE__*/React.createElement("div", {
    className: "bf-modal-content-container"
  }, children)));
};

Modal.propTypes = {
  /** Boolean describing if the modal should be shown or not. */
  isOpen: PropTypes.bool.isRequired,

  /** Header text of the modal. This sets both contentLabel and aria.labelledby */
  header: PropTypes.string.isRequired,

  /** Header icon. See Icon component for more detail */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Children of the header element, will be placed after the header text */
  headerChildren: PropTypes.node,

  /** CSS class name(s) for modal */
  className: PropTypes.string,

  /** Function that will be run when the modal is requested to be closed (either by clicking on overlay, clicking close button or pressing ESC). Note: It is not called if isOpen is changed by other means. */
  onRequestClose: PropTypes.func,

  /** Modal content */
  children: PropTypes.node,

  /** @ignore */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  // @ts-ignore
  aria: PropTypes.shape({
    labelledby: PropTypes.string,
    describedby: PropTypes.string,
    modal: PropTypes.oneOf([true, false, 'true', 'false'])
  }),

  /** @ignore */
  overlayClassName: PropTypes.string,

  /** @ignore */
  contentLabel: PropTypes.string,

  /** @ignore */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  // @ts-ignore
  style: PropTypes.shape({
    content: PropTypes.object,
    overlay: PropTypes.object
  }),

  /** Content should have no padding */
  noPadding: PropTypes.bool,

  /** Header should be visible */
  noHeader: PropTypes.bool
};
Modal.setAppElement = ReactModal.setAppElement;
Modal.Footer = ModalFooter;
Modal.displayName = 'Modal';
export default Modal;