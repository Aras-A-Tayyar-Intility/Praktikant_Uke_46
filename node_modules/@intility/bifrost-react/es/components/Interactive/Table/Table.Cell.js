function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import accessibleOnClick from '../../../utils/accessibleOnClick';

/**
 * Table.Cell component (td element)
 * @visibleName Table.Cell
 */
var TableCell = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      onClick = _ref.onClick,
      rightBorder = _ref.rightBorder,
      props = _objectWithoutProperties(_ref, ["className", "onClick", "rightBorder"]);

  return /*#__PURE__*/React.createElement("td", _extends({
    className: classNames(className, {
      'bf-table-cell-clickable': onClick,
      'bf-table-cell-right-border': rightBorder
    }),
    ref: ref
  }, props, accessibleOnClick(props, onClick)));
});
TableCell.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** if passed, sets cursor to pointer */
  onClick: PropTypes.func,

  /** adds a border to the right of the cell */
  rightBorder: PropTypes.bool
};
TableCell.displayName = 'Table.Cell';
export default TableCell;