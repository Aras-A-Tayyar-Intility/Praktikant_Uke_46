function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useState } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import Icon from '../../Visual/Icon';
import TableCell from './Table.Cell';
import { faAngleRight } from '../../../assets';
import accessibleOnClick from '../../../utils/accessibleOnClick';
import SlideDown from '../../Utility/SlideDown';
import useLocale from '../../../hooks/useLocale';

// always assume 1 additional header for expand icon, unless recursive
var getTotalColumns = function getTotalColumns(children) {
  var isRecursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var columns = 0;

  if (children) {
    // children is single element
    if (!Array.isArray(children)) {
      var _children$props$colSp, _children$props;

      var colSpan = (_children$props$colSp = children === null || children === void 0 ? void 0 : (_children$props = children['props']) === null || _children$props === void 0 ? void 0 : _children$props['colSpan']) !== null && _children$props$colSp !== void 0 ? _children$props$colSp : 1;

      if (typeof colSpan === 'string') {
        colSpan = parseInt(colSpan, 10);
      }

      columns = colSpan;
    } else {
      columns = children.reduce(function (acc, cur) {
        return acc + getTotalColumns(cur, true);
      }, 0);
    }
  }

  if (!isRecursive) {
    columns += 1;
  }

  return columns;
};
/**
 * Table.Row component (tr element)
 * @visibleName Table.Row
 */


var TableRow = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      onClickProp = _ref.onClick,
      content = _ref.content,
      openProp = _ref.open,
      onOpenChange = _ref.onOpenChange,
      children = _ref.children,
      limitExpandClick = _ref.limitExpandClick,
      autoScroll = _ref.autoScroll,
      props = _objectWithoutProperties(_ref, ["className", "onClick", "content", "open", "onOpenChange", "children", "limitExpandClick", "autoScroll"]);

  var locale = useLocale();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      openState = _useState2[0],
      setOpenState = _useState2[1]; // if open prop is undefined, use state


  var open = openProp !== null && openProp !== void 0 ? openProp : openState;

  var handleArrowClick = function handleArrowClick() {
    setOpenState(function (o) {
      return !o;
    });

    if (typeof onOpenChange === 'function') {
      onOpenChange();
    }
  };

  var onClick = content && !limitExpandClick ? handleArrowClick : onClickProp;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("tr", _extends({
    className: classNames(className, {
      'bf-table-row-clickable': onClick,
      'bf-table-expand-nolimit': !limitExpandClick,
      'bf-table-expand-closed': content && !open
    }),
    ref: ref
  }, props, accessibleOnClick(props, onClick)), content && /*#__PURE__*/React.createElement(TableCell, {
    className: "bf-table-expand-icon-cell",
    onClick: limitExpandClick ? handleArrowClick : undefined,
    "aria-label": "".concat(openState ? locale.collapse : locale.expand, " ").concat(locale.row)
  }, /*#__PURE__*/React.createElement("div", {
    className: "bf-table-expand-icon-wrapper"
  }, /*#__PURE__*/React.createElement(Icon, {
    className: classNames('bf-table-expand-icon', {
      'bf-table-expand-icon-open': open
    }),
    icon: faAngleRight
  }))), children), content && /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", {
    className: "bf-table-expandable-cell",
    colSpan: getTotalColumns(children)
  }, /*#__PURE__*/React.createElement(SlideDown, {
    contentClassName: "bf-table-expanded-content bfc-base-2-bg",
    open: open,
    autoScroll: autoScroll
  }, content))));
});
TableRow.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** if passed, sets cursor to pointer and selectable style */
  onClick: PropTypes.func,

  /** Expandable Content */
  content: PropTypes.node,

  /** Override for open state */
  open: PropTypes.bool,

  /** Callback for when expand arrow is clicked */
  onOpenChange: PropTypes.func,

  /** @ignore */
  children: PropTypes.node,
  //** Only expand when the arrow cell is clicked */
  limitExpandClick: PropTypes.bool,

  /** Automatically scroll to view expanded content */
  autoScroll: PropTypes.bool
};
TableRow.displayName = 'Table.Row';
export default TableRow;