function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import TableBody from './Table.Body';
import TableCell from './Table.Cell';
import TableFooter from './Table.Footer';
import TableHeader from './Table.Header';
import TableHeaderCell from './Table.HeaderCell';
import TableRow from './Table.Row';

/**
 * Table component (table element)
 * @visibleName Table
 */
var Table = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      noBorder = _ref.noBorder,
      vertical = _ref.vertical,
      props = _objectWithoutProperties(_ref, ["className", "noBorder", "vertical"]);

  return /*#__PURE__*/React.createElement("table", _extends({
    className: classNames(className, 'bf-table', 'bfc-base-3-bg', // lets descendant elements (like <Input>) be styled with a contrasting bg
    {
      'bf-table-noborder': noBorder,
      'bf-table-vertical-header': vertical
    }),
    ref: ref
  }, props));
});
Table.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Hide outer left table border */
  noBorder: PropTypes.bool,

  /** Indicates whether table includes vertical headers */
  vertical: PropTypes.bool
};
Table.Body = TableBody;
Table.Cell = TableCell;
Table.Footer = TableFooter;
Table.Header = TableHeader;
Table.HeaderCell = TableHeaderCell;
Table.Row = TableRow;
Table.displayName = 'Table';
export default Table;