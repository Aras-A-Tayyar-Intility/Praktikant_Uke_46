function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import Icon from '../../Visual/Icon';
import { faSortUp, faSortDown, faSort } from '@fortawesome/free-solid-svg-icons';
import accessibleOnClick from '../../../utils/accessibleOnClick';

/**
 * Table.HeaderCell component (th element)
 * @visibleName Table.HeaderCell
 */
var TableHeaderCell = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      onClick = _ref.onClick,
      sorting = _ref.sorting,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["className", "onClick", "sorting", "children"]);

  return /*#__PURE__*/React.createElement("th", _extends({
    className: classNames(className, {
      'bf-table-cell-clickable': onClick
    }),
    ref: ref
  }, props, accessibleOnClick(props, onClick)), children, sorting && (sorting === 'none' ? /*#__PURE__*/React.createElement(Icon, {
    className: "bf-table-header-cell-sort bf-table-header-cell-sort-none",
    icon: faSort
  }) : /*#__PURE__*/React.createElement(Icon, {
    className: "bf-table-header-cell-sort",
    icon: sorting === 'asc' ? faSortUp : faSortDown
  })));
});
TableHeaderCell.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** if passed, sets cursor to pointer */
  onClick: PropTypes.func,

  /** if passed, indicates sort order on the header. Can be one of: 'asc', 'desc', 'none' */
  sorting: PropTypes.oneOf(['asc', 'desc', 'none']),

  /** @ignore */
  children: PropTypes.node
};
TableHeaderCell.displayName = 'Table.HeaderCell';
export default TableHeaderCell;