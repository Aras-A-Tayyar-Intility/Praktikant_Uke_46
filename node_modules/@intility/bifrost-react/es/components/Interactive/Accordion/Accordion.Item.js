function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import SlideDown from '../../Utility/SlideDown';
import Icon from '../../Visual/Icon';
import useAccordionContext from './hooks/useAccordionContext';
import { faAngleRight } from '../../../assets/faAngleRight';
import useLocale from '../../../hooks/useLocale';

/**
 * A single pane for `<Accordion>` container
 * @visibleName Accordion.Item
 */
var AccordionItem = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      title = _ref.title,
      children = _ref.children,
      active = _ref.active,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      noPadding = _ref.noPadding,
      icon = _ref.icon,
      htmlTitle = _ref.htmlTitle,
      autoScroll = _ref.autoScroll,
      ariaLabel = _ref['aria-label'],
      props = _objectWithoutProperties(_ref, ["className", "title", "children", "active", "onClick", "disabled", "noPadding", "icon", "htmlTitle", "autoScroll", "aria-label"]);

  var locale = useLocale();

  var _useAccordionContext = useAccordionContext(),
      onToggle = _useAccordionContext.onToggle,
      activeItem = _useAccordionContext.activeItem,
      variant = _useAccordionContext.variant;

  var isActive = active || activeItem === title;

  var handleChange = function handleChange(key) {
    if (onClick) {
      onClick(key);
    } else if (onToggle) {
      onToggle(key === activeItem ? null : key);
    }
  };

  return /*#__PURE__*/React.createElement("div", _extends({
    className: classNames(className, 'bf-accordion-item', {
      'bf-accordion-item-active': isActive,
      'bf-accordion-item-disabled': disabled
    }),
    "data-testid": "bf-accordion-item",
    ref: ref
  }, props), /*#__PURE__*/React.createElement("button", {
    className: "bf-accordion-item-title",
    "data-testid": "bf-accordion-item-title",
    onClick: function onClick() {
      return handleChange(title);
    },
    title: htmlTitle !== null && htmlTitle !== void 0 ? htmlTitle : typeof title === 'string' ? title : undefined,
    "aria-label": ariaLabel,
    disabled: disabled,
    type: "button"
  }, variant !== 'styled' && /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleRight,
    fixedWidth: true,
    className: "bf-accordion-item-angle"
  }), icon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    fixedWidth: true,
    className: "bf-accordion-item-icon"
  }), /*#__PURE__*/React.createElement("span", {
    className: "bf-neutral-link-text"
  }, title), variant === 'styled' && /*#__PURE__*/React.createElement("span", {
    className: "bf-accordion-item-angle-wrapper"
  }, /*#__PURE__*/React.createElement("span", {
    className: "bf-neutral-link-text"
  }, isActive ? locale.hide : locale.show), /*#__PURE__*/React.createElement(Icon, {
    icon: faAngleRight,
    fixedWidth: true,
    className: "bf-accordion-item-angle"
  }))), /*#__PURE__*/React.createElement(SlideDown, {
    contentClassName: classNames('bf-accordion-item-content', {
      'bfl-nopadding': noPadding
    }),
    open: isActive,
    autoScroll: autoScroll,
    "data-testid": "bf-accordion-item-content"
  }, children));
}); // todo: fix proptypes to match typescript, if possible? herman halp!

AccordionItem.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Title of accordion item. **Note:** it is important that this prop is unique (unless you supply your own active state and onChange handler) */
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,

  /** Content to show when accordion item is open */
  children: PropTypes.node,

  /** Overrides default onClick on Accordion.Item */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  onClick: PropTypes.func,

  /** Bool to indicate when item should be opened */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  active: PropTypes.bool,

  /** Disabled accordion item */
  disabled: PropTypes.bool,

  /** Bool to remove padding from content div */
  noPadding: PropTypes.bool,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Title to use for long titles cut off with ellipsis, not needed if title is string */
  htmlTitle: PropTypes.string,

  /** Automatically scroll to view expanded content */
  autoScroll: PropTypes.bool
};
AccordionItem.defaultProps = {
  disabled: false
};
AccordionItem.displayName = 'Accordion.Item';
export default AccordionItem;