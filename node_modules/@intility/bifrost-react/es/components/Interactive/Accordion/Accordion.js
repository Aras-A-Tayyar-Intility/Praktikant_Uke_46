function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useCallback, useMemo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import AccordionItem from './Accordion.Item';
import { AccordionContext } from './hooks/useAccordionContext';

/**
 * Accordion component - vertical menu with collapsible sections
 */
var Accordion = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      active = _ref.active,
      onChange = _ref.onChange,
      noBorder = _ref.noBorder,
      variant = _ref.variant,
      mode = _ref.mode,
      props = _objectWithoutProperties(_ref, ["children", "className", "active", "onChange", "noBorder", "variant", "mode"]);

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      activeKey = _useState2[0],
      setActiveKey = _useState2[1];

  var handleToggle = useCallback(function (activeKey) {
    if (onChange) {
      onChange(activeKey);
    } else {
      setActiveKey(activeKey);
    }
  }, [activeKey, setActiveKey, onChange]);
  var context = useMemo(function () {
    return {
      activeItem: onChange ? active : activeKey,
      onToggle: handleToggle,
      variant: variant
    };
  }, [activeKey, handleToggle, active, variant]);
  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    "data-testid": "bf-accordion-container",
    className: classNames(className, 'bf-accordion-container', {
      'bf-accordion-noborder': noBorder,
      'bf-accordion-styled': variant === 'styled',
      'bf-accordion-compact': mode === 'compact',
      'bf-accordion-responsive': mode === 'responsive'
    })
  }, props), children));
});
Accordion.propTypes = {
  /** CSS class name(s) */
  className: PropTypes.string,

  /** Required when using onChange - Overrides the internal state which allows you to control which Accordion.Item should be opened. */
  active: PropTypes.string,

  /** Overrides the internal onChange. This will be fired when clicking on Accordion.Item */
  onChange: PropTypes.func,

  /** One or more accordion items */
  children: PropTypes.node,

  /** Hide outermost border */
  noBorder: PropTypes.bool,

  /** Alternative 'styled' variant */
  variant: PropTypes.oneOf(['default', 'styled']),

  /** Choose between 'desktop' mode (default), 'compact', or 'responsive' (compact for screens smaller than 600px only)  */
  mode: PropTypes.oneOf(['default', 'responsive', 'compact'])
};
Accordion.defaultProps = {
  variant: 'default',
  mode: 'default'
};
Accordion.Item = AccordionItem;
Accordion.displayName = 'Accordion';
export default Accordion;