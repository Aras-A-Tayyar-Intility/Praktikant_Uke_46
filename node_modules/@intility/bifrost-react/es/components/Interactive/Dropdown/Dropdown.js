function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import Tippy from '@tippyjs/react';
import { hideAll } from 'tippy.js';
import classNames from 'classnames';

/**
 * Component to display a dropdown on click
 * @visibleName Dropdown
 */
var Dropdown = function Dropdown(_ref) {
  var children = _ref.children,
      className = _ref.className,
      placement = _ref.placement,
      variant = _ref.variant,
      noPadding = _ref.noPadding,
      props = _objectWithoutProperties(_ref, ["children", "className", "placement", "variant", "noPadding"]);

  return /*#__PURE__*/React.createElement(Tippy, _extends({
    onShow: function onShow() {
      return hideAll();
    },
    maxWidth: "none" // default is 350 for some reason
    ,
    interactive: true,
    className: classNames(className, 'bf-dropdown', {
      'bf-dropdown-border': variant === 'border',
      'bf-dropdown-nopadding': noPadding
    }),
    placement: placement
  }, props.visible === undefined && {
    trigger: 'click'
  }, props), children);
};

Dropdown.propTypes = {
  /** Element triggering the dropdown */
  children: PropTypes.element,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Variant of the dropdown: 'shadow' (default) or 'border' */
  variant: PropTypes.oneOf(['shadow', 'border']),

  /** Contents of the Dropdown */
  content: PropTypes.oneOfType([PropTypes.element, PropTypes.string, PropTypes.number]),

  /** Placement of the Dropdown (default 'bottom-start') */
  placement: PropTypes.oneOf(['auto', 'auto-start', 'auto-end', 'top', 'bottom', 'right', 'left', 'top-start', 'top-end', 'bottom-start', 'bottom-end', 'right-start', 'right-end', 'left-start', 'left-end']),

  /** State for controlled mode */
  visible: PropTypes.bool,

  /** Bool to remove padding from content */
  noPadding: PropTypes.bool
};
Dropdown.defaultProps = {
  placement: 'bottom-start',
  variant: 'shadow'
};
Dropdown.displayName = 'Dropdown';
export default Dropdown;