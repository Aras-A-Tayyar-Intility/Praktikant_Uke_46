function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React, { useRef, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { faExclamationTriangle, faCheck } from '@fortawesome/free-solid-svg-icons';
import classNames from 'classnames';
import { StateArray } from '../../../types';
import Icon from '../../Visual/Icon';
import setRef from '../../../utils/setRef';
import triggerOnChange from '../../../utils/triggerOnChange';
import { faTimes } from '../../../assets/faTimes';
import { Description, Feedback } from '../common';
import useUniqueId from '../../../hooks/useUniqueId';
import Label from '../Label';
import { fadSpinnerThird } from '../../../assets';

/**
 * Text input field
 */
var Input = /*#__PURE__*/forwardRef(function (_ref, _ref2) {
  var _inputRef$current;

  var label = _ref.label,
      hideLabel = _ref.hideLabel,
      icon = _ref.icon,
      iconProps = _ref.iconProps,
      rightIcon = _ref.rightIcon,
      className = _ref.className,
      id = _ref.id,
      disabled = _ref.disabled,
      state = _ref.state,
      feedback = _ref.feedback,
      required = _ref.required,
      description = _ref.description,
      requiredNoLabel = _ref.requiredNoLabel,
      optional = _ref.optional,
      variant = _ref.variant,
      clearable = _ref.clearable,
      loading = _ref.loading,
      onIconClick = _ref.onIconClick,
      iconButton = _ref.iconButton,
      containerProps = _ref.containerProps,
      props = _objectWithoutProperties(_ref, ["label", "hideLabel", "icon", "iconProps", "rightIcon", "className", "id", "disabled", "state", "feedback", "required", "description", "requiredNoLabel", "optional", "variant", "clearable", "loading", "onIconClick", "iconButton", "containerProps"]);

  var inputId = useUniqueId(id);
  var isOutline = variant === 'outline';
  var hasState = !!state && state !== 'theme';
  var hasIcon = !!icon || !!(iconProps !== null && iconProps !== void 0 && iconProps.icon);
  var inputRef = useRef(null);

  var handleClear = function handleClear() {
    if (disabled) return;

    if (inputRef.current) {
      triggerOnChange(inputRef.current, '');
      inputRef.current.focus();
    }
  };

  var inputIcon = null;

  if (hasIcon && !(hasState && rightIcon)) {
    inputIcon = /*#__PURE__*/React.createElement(Icon // @ts-ignore
    , _extends({
      icon: loading ? fadSpinnerThird : icon,
      spin: loading,
      fixedWidth: true
    }, iconProps, {
      className: classNames(iconProps === null || iconProps === void 0 ? void 0 : iconProps.className, {
        'bf-input-loading-icon': loading
      }),
      "data-testid": "bf-input-icon"
    }));
    inputIcon = onIconClick ? /*#__PURE__*/React.createElement("button", {
      type: "button",
      className: "bf-input-icon bf-input-icon-button",
      onClick: onIconClick,
      disabled: disabled
    }, inputIcon) : /*#__PURE__*/React.createElement("span", {
      className: classNames(iconProps === null || iconProps === void 0 ? void 0 : iconProps.className, 'bf-input-icon')
    }, inputIcon);
  } else if (loading) {
    inputIcon = /*#__PURE__*/React.createElement("span", {
      className: "bf-input-icon"
    }, /*#__PURE__*/React.createElement(Icon, {
      icon: fadSpinnerThird,
      fixedWidth: true,
      spin: true,
      className: "bf-input-loading-icon"
    }));
    rightIcon = true;
    hasState = false;
  }

  return /*#__PURE__*/React.createElement("div", _extends({}, containerProps, {
    /* spread first so we can override className */
    className: classNames('bf-input-container', containerProps === null || containerProps === void 0 ? void 0 : containerProps.className, {
      'bf-input-disabled': disabled,
      'bf-input-success': state === 'success' && !isOutline,
      'bf-input-warning': state === 'warning' && !isOutline,
      'bf-input-alert': state === 'alert' && !isOutline
    }),
    "data-testid": "bf-input-container"
  }), !hideLabel && /*#__PURE__*/React.createElement(Label, {
    htmlFor: inputId,
    required: !disabled && required && !requiredNoLabel,
    optional: optional,
    disabled: disabled
  }, label), description && /*#__PURE__*/React.createElement(Description, null, description), /*#__PURE__*/React.createElement("div", {
    className: classNames('bf-input-icon-container', {
      'bf-input-icon-right': !hasState && inputIcon && rightIcon,
      'bf-input-icon-left': inputIcon && !rightIcon,
      'bf-input-icon-state': hasState && !isOutline,
      'bf-input-outline': isOutline,
      'bf-input-clearable': clearable,
      'bf-input-icon-button-filled': iconButton
    }),
    "data-testid": "bf-input-icon-container"
  }, /*#__PURE__*/React.createElement("input", _extends({
    id: inputId,
    className: classNames(className, 'bf-input', {
      'bf-input-state-only': hasState && !inputIcon
    }),
    disabled: disabled,
    required: !disabled && (required || requiredNoLabel)
  }, hideLabel && {
    'aria-label': label
  }, {
    ref: function ref(r) {
      setRef(_ref2, r);
      setRef(inputRef, r);
    },
    autoComplete: "noAutocomplete"
  }, props)), inputIcon, clearable && (props.value || ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value)) && /*#__PURE__*/React.createElement("span", {
    className: "bf-input-clear-icon",
    onClick: function onClick() {
      return handleClear();
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: faTimes
  })), hasState && !isOutline && /*#__PURE__*/React.createElement("span", {
    className: "bf-state-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    fixedWidth: true,
    icon: state === 'alert' || state === 'warning' ? faExclamationTriangle : faCheck
  }))), typeof feedback === 'string' && /*#__PURE__*/React.createElement(Feedback, null, feedback || "\xA0"));
}); //@ts-ignore

Input.propTypes = {
  /** Required label text */
  label: PropTypes.string.isRequired,

  /** Hide label text, will add label prop as aria-label for screen readers */
  hideLabel: PropTypes.bool,

  /** Font Awesome icon reference (or string if using library) */
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Icon position. Default is left side */
  rightIcon: PropTypes.bool,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Unique id for input and label */
  id: PropTypes.string,

  /** Disables the input field */
  disabled: PropTypes.bool,

  /** Available states: `theme` (default), `success`, `warning`, and `alert` */
  state: PropTypes.oneOf(StateArray),

  /** Feedback text below the input field */
  feedback: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** Required prop indicating mandatory field */
  required: PropTypes.bool,

  /** Description text to show more information */
  description: PropTypes.string,

  /** Bool to mark input required, but hides the required label */
  requiredNoLabel: PropTypes.bool,

  /** Marks input as optional */
  optional: PropTypes.bool,

  /** Available variants: 'basic' (default), and 'outline' */
  variant: PropTypes.oneOf(['basic', 'outline']),

  /** Display a clickable 'x' to clear the field */
  clearable: PropTypes.bool,

  /** Display a loading spinner in the input */
  loading: PropTypes.bool,

  /** @ignore */
  value: PropTypes.any,

  /** Props for the containing `div` element */
  containerProps: PropTypes.object,

  /** Icon component props */
  //@ts-ignore
  iconProps: PropTypes.shape({
    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),
    className: PropTypes.string,
    onClick: PropTypes.func
  }),

  /** onClick handler for icon */
  onIconClick: PropTypes.func,

  /** Display icon as filled button */
  iconButton: PropTypes.bool
};
Input.defaultProps = {
  variant: 'basic'
};
Input.displayName = 'Input';
export default Input;