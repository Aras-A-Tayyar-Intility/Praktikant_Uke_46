function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import FieldGroupItem from './FieldGroup.Item';
import useLocale from '../../../hooks/useLocale';
import { faBan } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';

/**
 * Container for multiple inputs to be styled as a group.
 */
var FieldGroup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      label = _ref.label,
      description = _ref.description,
      feedback = _ref.feedback,
      state = _ref.state,
      required = _ref.required,
      optional = _ref.optional,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["children", "className", "label", "description", "feedback", "state", "required", "optional", "disabled"]);

  var locale = useLocale();
  return /*#__PURE__*/React.createElement("fieldset", {
    className: "bf-fieldset",
    disabled: disabled,
    "aria-required": required ? true : false
  }, label && /*#__PURE__*/React.createElement("legend", {
    className: "bf-label bf-fieldgroup-legend"
  }, label, (required || optional) && /*#__PURE__*/React.createElement("span", {
    className: "bf-label-required"
  }, "(", required ? locale.required : locale.optional, ")"), disabled && /*#__PURE__*/React.createElement(Icon, {
    icon: faBan,
    className: "bf-input-disabled-icon"
  })), description && /*#__PURE__*/React.createElement("div", {
    className: "bf-label-description"
  }, description), /*#__PURE__*/React.createElement("div", _extends({
    className: classnames(className, 'bf-fieldgroup', {
      'bf-fieldgroup-alert': state === 'alert',
      'bf-fieldgroup-disabled': disabled
    })
  }, props, {
    ref: ref
  }), children), feedback && /*#__PURE__*/React.createElement("div", {
    className: "bf-label-feedback"
  }, feedback));
});
FieldGroup.propTypes = {
  /** Set of children components */
  children: PropTypes.node,

  /** Classnames */
  className: PropTypes.string,

  /** Description text to show more information */
  description: PropTypes.string,

  /** Feedback text below the input field */
  feedback: PropTypes.string,

  /** Label text */
  label: PropTypes.string,

  /** Available states: `theme` (default) and `alert` */
  state: PropTypes.oneOf(['theme', 'alert']),

  /** Display "(required)" after label text */
  required: PropTypes.bool,

  /** Disables the input field */
  disabled: PropTypes.bool,

  /** Display "(optional)" after label text */
  optional: PropTypes.bool
};
FieldGroup.Item = FieldGroupItem;
FieldGroup.displayName = 'FieldGroup';
export default FieldGroup;