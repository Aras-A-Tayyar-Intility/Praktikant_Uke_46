function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { faSquare as farSquare, faCircle as farCircle } from '@fortawesome/free-regular-svg-icons';
import { faDotCircle as fasDotCircle, faCheckSquare as fasCheckSquare } from '@fortawesome/free-solid-svg-icons';
import { faCheck, faTimes } from '../../../assets';
import Icon from '../../Visual/Icon';
import useUniqueId from '../../../hooks/useUniqueId';

/**
 * Checkbox, radio button, or a switch toggle
 */
var Checkbox = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var label = _ref.label,
      checked = _ref.checked,
      indeterminate = _ref.indeterminate,
      hideLabel = _ref.hideLabel,
      type = _ref.type,
      button = _ref.button,
      disabled = _ref.disabled,
      className = _ref.className,
      id = _ref.id,
      align = _ref.align,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["label", "checked", "indeterminate", "hideLabel", "type", "button", "disabled", "className", "id", "align", "style"]);

  var checkboxId = useUniqueId(id);
  var isRadio = type === 'radio';
  var isSwitch = type === 'switch';
  var icon = checked ? fasCheckSquare : farSquare;
  if (isRadio) icon = checked ? fasDotCircle : farCircle;
  if (indeterminate) icon = farSquare;
  if (!align) align = isSwitch ? 'right' : 'left';
  return /*#__PURE__*/React.createElement("div", {
    className: classnames('bf-checkbox-wrapper', "bf-checkbox-".concat(align), className, {
      'bf-checkbox-indeterminate': indeterminate,
      'bf-switch-wrapper': isSwitch,
      'bf-checkbox-hidelabel': hideLabel
    })
  }, /*#__PURE__*/React.createElement("input", _extends({
    className: "bf-checkbox",
    type: isRadio ? 'radio' : 'checkbox',
    checked: checked,
    disabled: disabled,
    id: checkboxId,
    "data-testid": "bf-checkbox",
    ref: ref
  }, hideLabel && typeof label === 'string' ? {
    'aria-label': label
  } : {}, props)), /*#__PURE__*/React.createElement("label", {
    className: classnames('bf-checkbox-label', {
      'bf-button': button
    }),
    htmlFor: checkboxId,
    style: style,
    "data-testid": "bf-checkbox-label"
  }, !isSwitch && /*#__PURE__*/React.createElement("span", {
    className: "bf-checkbox-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    fixedWidth: true,
    icon: icon
  })), /*#__PURE__*/React.createElement("span", {
    className: "bf-checkbox-label-text"
  }, label), isSwitch && /*#__PURE__*/React.createElement("span", {
    className: "bf-switch"
  }, /*#__PURE__*/React.createElement("span", {
    className: "bf-switch-thumb"
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: checked ? faCheck : faTimes
  })))));
});
Checkbox.propTypes = {
  /** Label text */
  label: PropTypes.node,

  /** Checked state */
  checked: PropTypes.bool,

  /** When checked state is not known (useful for showing the state of a group of checkboxes) */
  indeterminate: PropTypes.bool,

  /** Change event callback */
  onChange: PropTypes.func,

  /** Checkbox type: `checkbox` (default), `radio` or `switch` */
  type: PropTypes.oneOf(['checkbox', 'radio', 'switch']),

  /** Display as a button */
  button: PropTypes.bool,

  /** Hide label text, will add label prop as aria-label for screen readers */
  hideLabel: PropTypes.bool,

  /** Disable the checkbox */
  disabled: PropTypes.bool,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Unique id for input and label */
  id: PropTypes.string,

  /** Inline CSS styles */
  style: PropTypes.object,

  /** Align checkbox icon 'left' or 'right' of label text ('left' is default, except when type='switch') */
  align: PropTypes.oneOf(['left', 'right'])
};
Checkbox.defaultProps = {
  hideLabel: false,
  type: 'checkbox',
  button: false,
  disabled: false,
  className: '',
  id: '',
  style: {}
};
Checkbox.displayName = 'Checkbox';
export default Checkbox;