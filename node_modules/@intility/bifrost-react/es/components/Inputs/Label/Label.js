function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faBan } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';
import useLocale from '../../../hooks/useLocale';
var Label = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var className = _ref.className,
      children = _ref.children,
      required = _ref.required,
      optional = _ref.optional,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["className", "children", "required", "optional", "disabled"]);

  var locale = useLocale();
  return /*#__PURE__*/React.createElement("label", _extends({}, props, {
    ref: ref,
    className: classNames(className, 'bf-label')
  }), children, (required || optional) && children && !disabled && /*#__PURE__*/React.createElement("span", {
    className: "bf-label-required"
  }, "(", required ? locale.required : locale.optional, ")"), disabled && /*#__PURE__*/React.createElement(Icon, {
    icon: faBan,
    className: "bf-input-disabled-icon"
  }));
});
Label.propTypes = {
  /** Label text (or react node) */
  children: PropTypes.node,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Display "(required)" after label text */
  required: PropTypes.bool,

  /** Display "(optional)" after label text */
  optional: PropTypes.bool,

  /** Display faBan icon after label text */
  disabled: PropTypes.bool,

  /** Associate the label with an input that has this unique id */
  htmlFor: PropTypes.string
};
export default Label;