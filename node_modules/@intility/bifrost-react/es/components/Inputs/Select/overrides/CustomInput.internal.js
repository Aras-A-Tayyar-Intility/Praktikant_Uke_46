function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { components } from 'react-select';
import PropTypes from 'prop-types';

var CustomInput = function CustomInput(props) {
  var _value$label;

  var _props$selectProps = props.selectProps,
      required = _props$selectProps.required,
      value = _props$selectProps.value;

  var updatedProps = _objectSpread(_objectSpread({}, props), {}, {
    autoComplete: 'noAutocomplete'
  });

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(components.Input, updatedProps), /*#__PURE__*/React.createElement("input", {
    style: {
      opacity: 0,
      height: 0,
      position: 'absolute',
      pointerEvents: 'none'
    },
    onChange: function onChange(e) {
      return e.preventDefault();
    },
    value: (_value$label = value === null || value === void 0 ? void 0 : value.label) !== null && _value$label !== void 0 ? _value$label : '',
    tabIndex: -1,
    autoComplete: "noAutocomplete",
    required: required,
    "data-testid": "bf-select-input"
  }));
};

CustomInput.propTypes = {
  selectProps: PropTypes.object
};
export default CustomInput;