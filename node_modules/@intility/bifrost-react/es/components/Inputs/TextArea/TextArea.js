function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';
import { Description, Feedback } from '../common';
import useUniqueId from '../../../hooks/useUniqueId';
import Label from '../Label';

/**
 * TextArea field
 */
var TextArea = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var label = _ref.label,
      className = _ref.className,
      id = _ref.id,
      disabled = _ref.disabled,
      state = _ref.state,
      feedback = _ref.feedback,
      required = _ref.required,
      hideLabel = _ref.hideLabel,
      description = _ref.description,
      requiredNoLabel = _ref.requiredNoLabel,
      optional = _ref.optional,
      containerProps = _ref.containerProps,
      props = _objectWithoutProperties(_ref, ["label", "className", "id", "disabled", "state", "feedback", "required", "hideLabel", "description", "requiredNoLabel", "optional", "containerProps"]);

  var textareaId = useUniqueId(id);
  return /*#__PURE__*/React.createElement("div", _extends({
    "data-testid": "bf-textarea-container"
  }, containerProps, {
    /* spread first so we can override className */
    className: classNames(containerProps && containerProps.className, {
      'bf-textarea-container': true
    }, {
      'bf-textarea-disabled': disabled
    }, {
      'bf-textarea-warning': state === 'warning'
    }, {
      'bf-textarea-alert': state === 'alert'
    })
  }), !hideLabel && /*#__PURE__*/React.createElement(Label, {
    htmlFor: textareaId,
    required: required && !requiredNoLabel,
    optional: optional,
    disabled: disabled
  }, label), description && /*#__PURE__*/React.createElement(Description, null, description), /*#__PURE__*/React.createElement("div", {
    "data-testid": "bf-textarea-icon-container",
    className: "bf-textarea-icon-container"
  }, /*#__PURE__*/React.createElement("textarea", _extends({
    id: textareaId,
    "data-testid": "bf-textarea",
    className: classNames('bf-textarea', 'bf-scrollbar', className),
    disabled: disabled
  }, hideLabel && {
    'aria-label': label
  }, {
    required: !disabled && (required || requiredNoLabel),
    ref: ref
  }, props)), !disabled && state && (state === 'warning' || state === 'alert') && /*#__PURE__*/React.createElement(Icon, {
    className: "bf-textarea-icon",
    icon: faExclamationTriangle
  })), feedback && /*#__PURE__*/React.createElement(Feedback, null, feedback));
});
TextArea.propTypes = {
  /** Required label text */
  label: PropTypes.string.isRequired,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Unique id for input and label */
  id: PropTypes.string,

  /** Disables the textarea */
  disabled: PropTypes.bool,

  /** Available states: `theme` (default), `warning`, and `alert` */
  state: PropTypes.oneOf(['warning', 'alert']),

  /** Feedback text below the textarea */
  feedback: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** Required prop indicating mandatory field */
  required: PropTypes.bool,

  /** Bool to hide label */
  hideLabel: PropTypes.bool,

  /** Description text to show more information */
  description: PropTypes.string,

  /** Bool to mark textarea required, but hides the required label */
  requiredNoLabel: PropTypes.bool,

  /** Marks textarea as optional */
  optional: PropTypes.bool,

  /** Props for the containing `div` element */
  containerProps: PropTypes.object
};
TextArea.defaultProps = {
  disabled: false,
  required: false,
  requiredNoLabel: false,
  optional: false
};
TextArea.displayName = 'TextArea';
export default TextArea;