function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { StateArray } from '../../../types';
import Icon from '../../Visual/Icon';
import ButtonGroup from './Button.Group';

/**
 * Clickable button
 */
var Button = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      variant = _ref.variant,
      state = _ref.state,
      disabled = _ref.disabled,
      stretch = _ref.stretch,
      className = _ref.className,
      rightIcon = _ref.rightIcon,
      icon = _ref.icon,
      title = _ref.title,
      small = _ref.small,
      active = _ref.active,
      props = _objectWithoutProperties(_ref, ["children", "variant", "state", "disabled", "stretch", "className", "rightIcon", "icon", "title", "small", "active"]);

  var autoTitle = !stretch && typeof children === 'string' && children.length > 20 ? children : undefined;
  return /*#__PURE__*/React.createElement("button", _extends({
    "data-testid": "bf-button",
    className: classnames(className, 'bf-button', {
      'bf-button-small': small && (variant === 'filled' || variant === 'basic' || variant === 'outline'),
      'bf-button-filled': variant === 'filled',
      'bf-button-outline': variant === 'outline',
      'bf-button-inactive': state === 'inactive',
      'bf-button-alert': state === 'alert',
      'bf-button-stretch': stretch || icon && !children,
      'bf-button-left-icon': icon && children && !rightIcon,
      'bf-button-right-icon': icon && children && rightIcon,
      'bf-button-selected': active
    }),
    disabled: disabled,
    title: title || autoTitle,
    ref: ref
  }, props), icon && !rightIcon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  }), children, icon && rightIcon && /*#__PURE__*/React.createElement(Icon, {
    icon: icon
  }));
});
Button.Group = ButtonGroup;
Button.propTypes = {
  /** Button content (text or fragment) */
  children: PropTypes.node,

  /** Disable the button */
  disabled: PropTypes.bool,

  /** Ignore width constraints */
  stretch: PropTypes.bool,

  /** Available variants: 'basic' (default), 'filled', and 'outline' */
  variant: PropTypes.oneOf(['basic', 'filled', 'outline']),

  /** Available states (only for 'filled' variant): 'theme' (default), and 'inactive' */
  state: PropTypes.oneOf(StateArray),

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Font Awesome icon reference (or string if using library) */
  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Position icon on right hand side */
  rightIcon: PropTypes.bool,

  /** Optional html title (tooltip) */
  title: PropTypes.string,

  /** Change the button size to small */
  small: PropTypes.bool,

  /** Bool prop indicating a selected Button. This only works when used as children of Button.Group */
  active: PropTypes.bool
};
Button.defaultProps = {
  disabled: false,
  stretch: false,
  variant: 'basic',
  state: 'theme',
  className: '',
  rightIcon: false,
  title: '',
  small: false
};
Button.displayName = 'Button';
export default Button;