function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/ban-ts-ignore */
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { faExclamationTriangle, faCheck, faCalendarAlt } from '@fortawesome/free-solid-svg-icons';
import ReactDatePicker from 'react-datepicker';
import { StateArray } from '../../../types';
import Icon from '../../Visual/Icon';
import useLocale from '../../../hooks/useLocale';
import Label from '../Label';
import { Description, Feedback } from '../common';
import useUniqueId from '../../../hooks/useUniqueId';

var DatePicker = function DatePicker(_ref) {
  var label = _ref.label,
      hideLabel = _ref.hideLabel,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      disabled = _ref.disabled,
      state = _ref.state,
      feedback = _ref.feedback,
      required = _ref.required,
      description = _ref.description,
      requiredNoLabel = _ref.requiredNoLabel,
      optional = _ref.optional,
      className = _ref.className,
      isClearable = _ref.isClearable,
      id = _ref.id,
      containerProps = _ref.containerProps,
      props = _objectWithoutProperties(_ref, ["label", "hideLabel", "icon", "rightIcon", "disabled", "state", "feedback", "required", "description", "requiredNoLabel", "optional", "className", "isClearable", "id", "containerProps"]);

  var locale = useLocale();
  var inputId = useUniqueId(id);
  var displayIcon;

  if (state === 'warning' || state === 'alert') {
    displayIcon = faExclamationTriangle;
  } else if (state === 'success') {
    displayIcon = faCheck;
  } else if (icon) {
    displayIcon = icon;
  } else {
    displayIcon = faCalendarAlt;
  }

  return /*#__PURE__*/React.createElement("div", _extends({}, containerProps, {
    className: classNames('bf-datepicker-container', containerProps && containerProps.className, {
      'bf-datepicker-disabled': disabled,
      'bf-datepicker-success': state === 'success',
      'bf-datepicker-warning': state === 'warning',
      'bf-datepicker-alert': state === 'alert'
    }),
    "data-testid": "bf-datepicker-container"
  }), !hideLabel && /*#__PURE__*/React.createElement(Label, {
    htmlFor: inputId,
    required: required && !requiredNoLabel,
    optional: optional,
    disabled: disabled
  }, label), description && /*#__PURE__*/React.createElement(Description, null, description), /*#__PURE__*/React.createElement("div", {
    className: classNames('bf-datepicker-icon-container', {
      'bf-datepicker-icon-right': rightIcon,
      'bf-datepicker-icon-left': !rightIcon,
      'bf-show-time-select': props.showTimeSelect,
      'bf-datepicker-clearable': isClearable
    })
  }, /*#__PURE__*/React.createElement(ReactDatePicker, _extends({
    popperPlacement: "bottom",
    className: classNames('bf-datepicker', className),
    id: inputId,
    dateFormat: (props === null || props === void 0 ? void 0 : props.showYearPicker) && 'yyyy' || (props === null || props === void 0 ? void 0 : props.showMonthYearPicker) && 'MM.yyyy' || ((props === null || props === void 0 ? void 0 : props.showTimeSelect) || (props === null || props === void 0 ? void 0 : props.showTimeInput)) && 'dd.MM.yyyy HH:mm' || 'dd.MM.yyyy',
    timeFormat: "HH:mm",
    showMonthDropdown: true,
    useShortMonthInDropdown: true,
    showYearDropdown: true,
    yearDropdownItemNumber: 5,
    disabled: disabled,
    locale: locale.datepicker,
    placeholderText: props !== null && props !== void 0 && props.showTimeSelect || props !== null && props !== void 0 && props.showTimeInput ? 'DD.MM.YYYY HH:MM' : 'DD.MM.YYYY',
    isClearable: isClearable,
    formatWeekDay: function formatWeekDay(day) {
      return day.substr(0, 1);
    }
  }, (props === null || props === void 0 ? void 0 : props.showTimeSelect) && {
    fixedHeight: true
  }, props)), /*#__PURE__*/React.createElement("span", {
    className: classNames('bf-datepicker-icon', {
      'bf-state-icon': state
    })
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: displayIcon,
    fixedWidth: true
  }))), feedback && /*#__PURE__*/React.createElement(Feedback, null, feedback));
};

DatePicker.propTypes = {
  /** Required label text */
  label: PropTypes.string.isRequired,

  /** Hide label text, will add label prop as aria-label for screen readers */
  hideLabel: PropTypes.bool,

  /** Font Awesome icon reference (or string if using library) */
  //@ts-ignore
  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** Position icon on right hand side (default true) */
  rightIcon: PropTypes.bool,

  /** Available states: `theme` (default), `success`, `warning`, and `alert` */
  state: PropTypes.oneOf(StateArray),

  /** Feedback text below the input field */
  feedback: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Unique id for input and label */
  id: PropTypes.string,

  /** Disables the input field */
  disabled: PropTypes.bool,

  /** Placeholder text */
  placeholderText: PropTypes.string,

  /** Date format. Default 'dd.MM.yyyy' */
  dateFormat: PropTypes.string,

  /** Required prop indicating mandatory field */
  required: PropTypes.bool,

  /** Description text to show more information */
  description: PropTypes.string,

  /** Bool to mark input required, but hides the required label */
  requiredNoLabel: PropTypes.bool,

  /** Marks input as optional */
  optional: PropTypes.bool,

  /** Props for the containing `div` element */
  containerProps: PropTypes.object,

  /** Showing time select */
  showTimeSelect: PropTypes.bool,

  /** Sets time intervals (default 30) */
  timeIntervals: PropTypes.number,

  /** Showing time input */
  showTimeInput: PropTypes.bool,

  /** Showing month selection */
  showMonthYearPicker: PropTypes.bool,

  /** Showing year selection */
  showYearPicker: PropTypes.bool,

  /**  Bool to indicate if Datepicker should be clearable. This will add an icon that will clear the value of Datepicker */
  isClearable: PropTypes.bool
};
DatePicker.defaultProps = {
  rightIcon: true,
  timeIntervals: 30
};
export default DatePicker;