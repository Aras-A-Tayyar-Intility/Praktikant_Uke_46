function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { faSquare, faCircle } from '@fortawesome/free-regular-svg-icons';
import { faCheckSquare, faDotCircle } from '@fortawesome/free-solid-svg-icons';
import Icon from '../../Visual/Icon';
import useUniqueId from '../../../hooks/useUniqueId';

/**
 * A card rendered as a Checkbox or Radio button
 */
var CheckboxCard = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'checkbox' : _ref$type,
      label = _ref.label,
      children = _ref.children,
      checked = _ref.checked,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? '' : _ref$id,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      className = _ref.className,
      header = _ref.header,
      props = _objectWithoutProperties(_ref, ["type", "label", "children", "checked", "id", "disabled", "className", "header"]);

  var checkboxId = useUniqueId(id);
  var isRadio = type === 'radio';
  var icon = checked ? faCheckSquare : faSquare;
  if (isRadio) icon = checked ? faDotCircle : faCircle;
  return /*#__PURE__*/React.createElement("div", {
    className: classnames('bf-checkboxcard-wrapper', className)
  }, /*#__PURE__*/React.createElement("input", _extends({
    id: checkboxId,
    className: "bf-checkboxcard-input",
    type: isRadio ? 'radio' : 'checkbox',
    checked: checked,
    ref: ref,
    disabled: disabled,
    "data-testid": "bf-checkboxcard-input"
  }, props)), /*#__PURE__*/React.createElement("label", {
    className: "bf-checkboxcard-label",
    htmlFor: checkboxId,
    "data-testid": "bf-checkboxcard-label"
  }, header && /*#__PURE__*/React.createElement("header", {
    className: "bf-checkboxcard-header"
  }, header), /*#__PURE__*/React.createElement("div", {
    className: "bf-checkboxcard-content"
  }, /*#__PURE__*/React.createElement("span", {
    className: "bf-checkboxcard-label-text"
  }, label, /*#__PURE__*/React.createElement("span", {
    className: "bf-checkboxcard-icon",
    "data-testid": "bf-checkboxcard-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    fixedWidth: true,
    icon: icon
  }))), children)));
});
CheckboxCard.propTypes = {
  /** Label text or content shown as title */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,

  /** CheckboxCard type: `checkbox` (default) or `radio` */
  type: PropTypes.oneOf(['checkbox', 'radio']),

  /** CheckboxCard content */
  children: PropTypes.node,

  /** Checked state */
  checked: PropTypes.bool,

  /** Unique id for input and label */
  id: PropTypes.string,

  /** CSS class name(s) */
  className: PropTypes.string,

  /** Disable the component */
  disabled: PropTypes.bool,

  /** Optional header content */
  header: PropTypes.element
};
CheckboxCard.displayName = 'CheckboxCard';
export default CheckboxCard;